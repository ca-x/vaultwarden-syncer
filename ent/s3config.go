// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ca-x/vaultwarden-syncer/ent/s3config"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
)

// S3Config is the model entity for the S3Config schema.
type S3Config struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Endpoint holds the value of the "endpoint" field.
	Endpoint string `json:"endpoint,omitempty"`
	// AccessKeyID holds the value of the "access_key_id" field.
	AccessKeyID string `json:"access_key_id,omitempty"`
	// SecretAccessKey holds the value of the "secret_access_key" field.
	SecretAccessKey string `json:"secret_access_key,omitempty"`
	// Region holds the value of the "region" field.
	Region string `json:"region,omitempty"`
	// Bucket holds the value of the "bucket" field.
	Bucket string `json:"bucket,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the S3ConfigQuery when eager-loading is set.
	Edges             S3ConfigEdges `json:"edges"`
	storage_s3_config *int
	selectValues      sql.SelectValues
}

// S3ConfigEdges holds the relations/edges for other nodes in the graph.
type S3ConfigEdges struct {
	// Storage holds the value of the storage edge.
	Storage *Storage `json:"storage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StorageOrErr returns the Storage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e S3ConfigEdges) StorageOrErr() (*Storage, error) {
	if e.Storage != nil {
		return e.Storage, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: storage.Label}
	}
	return nil, &NotLoadedError{edge: "storage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*S3Config) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case s3config.FieldID:
			values[i] = new(sql.NullInt64)
		case s3config.FieldEndpoint, s3config.FieldAccessKeyID, s3config.FieldSecretAccessKey, s3config.FieldRegion, s3config.FieldBucket:
			values[i] = new(sql.NullString)
		case s3config.ForeignKeys[0]: // storage_s3_config
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the S3Config fields.
func (s *S3Config) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case s3config.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case s3config.FieldEndpoint:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field endpoint", values[i])
			} else if value.Valid {
				s.Endpoint = value.String
			}
		case s3config.FieldAccessKeyID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field access_key_id", values[i])
			} else if value.Valid {
				s.AccessKeyID = value.String
			}
		case s3config.FieldSecretAccessKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field secret_access_key", values[i])
			} else if value.Valid {
				s.SecretAccessKey = value.String
			}
		case s3config.FieldRegion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field region", values[i])
			} else if value.Valid {
				s.Region = value.String
			}
		case s3config.FieldBucket:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field bucket", values[i])
			} else if value.Valid {
				s.Bucket = value.String
			}
		case s3config.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field storage_s3_config", value)
			} else if value.Valid {
				s.storage_s3_config = new(int)
				*s.storage_s3_config = int(value.Int64)
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the S3Config.
// This includes values selected through modifiers, order, etc.
func (s *S3Config) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// QueryStorage queries the "storage" edge of the S3Config entity.
func (s *S3Config) QueryStorage() *StorageQuery {
	return NewS3ConfigClient(s.config).QueryStorage(s)
}

// Update returns a builder for updating this S3Config.
// Note that you need to call S3Config.Unwrap() before calling this method if this S3Config
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *S3Config) Update() *S3ConfigUpdateOne {
	return NewS3ConfigClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the S3Config entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *S3Config) Unwrap() *S3Config {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("ent: S3Config is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *S3Config) String() string {
	var builder strings.Builder
	builder.WriteString("S3Config(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("endpoint=")
	builder.WriteString(s.Endpoint)
	builder.WriteString(", ")
	builder.WriteString("access_key_id=")
	builder.WriteString(s.AccessKeyID)
	builder.WriteString(", ")
	builder.WriteString("secret_access_key=")
	builder.WriteString(s.SecretAccessKey)
	builder.WriteString(", ")
	builder.WriteString("region=")
	builder.WriteString(s.Region)
	builder.WriteString(", ")
	builder.WriteString("bucket=")
	builder.WriteString(s.Bucket)
	builder.WriteByte(')')
	return builder.String()
}

// S3Configs is a parsable slice of S3Config.
type S3Configs []*S3Config
