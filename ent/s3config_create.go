// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ca-x/vaultwarden-syncer/ent/s3config"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
)

// S3ConfigCreate is the builder for creating a S3Config entity.
type S3ConfigCreate struct {
	config
	mutation *S3ConfigMutation
	hooks    []Hook
}

// SetEndpoint sets the "endpoint" field.
func (sc *S3ConfigCreate) SetEndpoint(s string) *S3ConfigCreate {
	sc.mutation.SetEndpoint(s)
	return sc
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (sc *S3ConfigCreate) SetNillableEndpoint(s *string) *S3ConfigCreate {
	if s != nil {
		sc.SetEndpoint(*s)
	}
	return sc
}

// SetAccessKeyID sets the "access_key_id" field.
func (sc *S3ConfigCreate) SetAccessKeyID(s string) *S3ConfigCreate {
	sc.mutation.SetAccessKeyID(s)
	return sc
}

// SetSecretAccessKey sets the "secret_access_key" field.
func (sc *S3ConfigCreate) SetSecretAccessKey(s string) *S3ConfigCreate {
	sc.mutation.SetSecretAccessKey(s)
	return sc
}

// SetRegion sets the "region" field.
func (sc *S3ConfigCreate) SetRegion(s string) *S3ConfigCreate {
	sc.mutation.SetRegion(s)
	return sc
}

// SetBucket sets the "bucket" field.
func (sc *S3ConfigCreate) SetBucket(s string) *S3ConfigCreate {
	sc.mutation.SetBucket(s)
	return sc
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (sc *S3ConfigCreate) SetStorageID(id int) *S3ConfigCreate {
	sc.mutation.SetStorageID(id)
	return sc
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (sc *S3ConfigCreate) SetNillableStorageID(id *int) *S3ConfigCreate {
	if id != nil {
		sc = sc.SetStorageID(*id)
	}
	return sc
}

// SetStorage sets the "storage" edge to the Storage entity.
func (sc *S3ConfigCreate) SetStorage(s *Storage) *S3ConfigCreate {
	return sc.SetStorageID(s.ID)
}

// Mutation returns the S3ConfigMutation object of the builder.
func (sc *S3ConfigCreate) Mutation() *S3ConfigMutation {
	return sc.mutation
}

// Save creates the S3Config in the database.
func (sc *S3ConfigCreate) Save(ctx context.Context) (*S3Config, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *S3ConfigCreate) SaveX(ctx context.Context) *S3Config {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *S3ConfigCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *S3ConfigCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *S3ConfigCreate) check() error {
	if _, ok := sc.mutation.AccessKeyID(); !ok {
		return &ValidationError{Name: "access_key_id", err: errors.New(`ent: missing required field "S3Config.access_key_id"`)}
	}
	if _, ok := sc.mutation.SecretAccessKey(); !ok {
		return &ValidationError{Name: "secret_access_key", err: errors.New(`ent: missing required field "S3Config.secret_access_key"`)}
	}
	if _, ok := sc.mutation.Region(); !ok {
		return &ValidationError{Name: "region", err: errors.New(`ent: missing required field "S3Config.region"`)}
	}
	if _, ok := sc.mutation.Bucket(); !ok {
		return &ValidationError{Name: "bucket", err: errors.New(`ent: missing required field "S3Config.bucket"`)}
	}
	return nil
}

func (sc *S3ConfigCreate) sqlSave(ctx context.Context) (*S3Config, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *S3ConfigCreate) createSpec() (*S3Config, *sqlgraph.CreateSpec) {
	var (
		_node = &S3Config{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(s3config.Table, sqlgraph.NewFieldSpec(s3config.FieldID, field.TypeInt))
	)
	if value, ok := sc.mutation.Endpoint(); ok {
		_spec.SetField(s3config.FieldEndpoint, field.TypeString, value)
		_node.Endpoint = value
	}
	if value, ok := sc.mutation.AccessKeyID(); ok {
		_spec.SetField(s3config.FieldAccessKeyID, field.TypeString, value)
		_node.AccessKeyID = value
	}
	if value, ok := sc.mutation.SecretAccessKey(); ok {
		_spec.SetField(s3config.FieldSecretAccessKey, field.TypeString, value)
		_node.SecretAccessKey = value
	}
	if value, ok := sc.mutation.Region(); ok {
		_spec.SetField(s3config.FieldRegion, field.TypeString, value)
		_node.Region = value
	}
	if value, ok := sc.mutation.Bucket(); ok {
		_spec.SetField(s3config.FieldBucket, field.TypeString, value)
		_node.Bucket = value
	}
	if nodes := sc.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   s3config.StorageTable,
			Columns: []string{s3config.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.storage_s3_config = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// S3ConfigCreateBulk is the builder for creating many S3Config entities in bulk.
type S3ConfigCreateBulk struct {
	config
	err      error
	builders []*S3ConfigCreate
}

// Save creates the S3Config entities in the database.
func (scb *S3ConfigCreateBulk) Save(ctx context.Context) ([]*S3Config, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*S3Config, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*S3ConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *S3ConfigCreateBulk) SaveX(ctx context.Context) []*S3Config {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *S3ConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *S3ConfigCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}
