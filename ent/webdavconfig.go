// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/webdavconfig"
)

// WebDAVConfig is the model entity for the WebDAVConfig schema.
type WebDAVConfig struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// URL holds the value of the "url" field.
	URL string `json:"url,omitempty"`
	// Username holds the value of the "username" field.
	Username string `json:"username,omitempty"`
	// Password holds the value of the "password" field.
	Password string `json:"password,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WebDAVConfigQuery when eager-loading is set.
	Edges                 WebDAVConfigEdges `json:"edges"`
	storage_webdav_config *int
	selectValues          sql.SelectValues
}

// WebDAVConfigEdges holds the relations/edges for other nodes in the graph.
type WebDAVConfigEdges struct {
	// Storage holds the value of the storage edge.
	Storage *Storage `json:"storage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StorageOrErr returns the Storage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WebDAVConfigEdges) StorageOrErr() (*Storage, error) {
	if e.Storage != nil {
		return e.Storage, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: storage.Label}
	}
	return nil, &NotLoadedError{edge: "storage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WebDAVConfig) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case webdavconfig.FieldID:
			values[i] = new(sql.NullInt64)
		case webdavconfig.FieldURL, webdavconfig.FieldUsername, webdavconfig.FieldPassword:
			values[i] = new(sql.NullString)
		case webdavconfig.ForeignKeys[0]: // storage_webdav_config
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WebDAVConfig fields.
func (wdc *WebDAVConfig) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case webdavconfig.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wdc.ID = int(value.Int64)
		case webdavconfig.FieldURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field url", values[i])
			} else if value.Valid {
				wdc.URL = value.String
			}
		case webdavconfig.FieldUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field username", values[i])
			} else if value.Valid {
				wdc.Username = value.String
			}
		case webdavconfig.FieldPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field password", values[i])
			} else if value.Valid {
				wdc.Password = value.String
			}
		case webdavconfig.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field storage_webdav_config", value)
			} else if value.Valid {
				wdc.storage_webdav_config = new(int)
				*wdc.storage_webdav_config = int(value.Int64)
			}
		default:
			wdc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WebDAVConfig.
// This includes values selected through modifiers, order, etc.
func (wdc *WebDAVConfig) Value(name string) (ent.Value, error) {
	return wdc.selectValues.Get(name)
}

// QueryStorage queries the "storage" edge of the WebDAVConfig entity.
func (wdc *WebDAVConfig) QueryStorage() *StorageQuery {
	return NewWebDAVConfigClient(wdc.config).QueryStorage(wdc)
}

// Update returns a builder for updating this WebDAVConfig.
// Note that you need to call WebDAVConfig.Unwrap() before calling this method if this WebDAVConfig
// was returned from a transaction, and the transaction was committed or rolled back.
func (wdc *WebDAVConfig) Update() *WebDAVConfigUpdateOne {
	return NewWebDAVConfigClient(wdc.config).UpdateOne(wdc)
}

// Unwrap unwraps the WebDAVConfig entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wdc *WebDAVConfig) Unwrap() *WebDAVConfig {
	_tx, ok := wdc.config.driver.(*txDriver)
	if !ok {
		panic("ent: WebDAVConfig is not a transactional entity")
	}
	wdc.config.driver = _tx.drv
	return wdc
}

// String implements the fmt.Stringer.
func (wdc *WebDAVConfig) String() string {
	var builder strings.Builder
	builder.WriteString("WebDAVConfig(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wdc.ID))
	builder.WriteString("url=")
	builder.WriteString(wdc.URL)
	builder.WriteString(", ")
	builder.WriteString("username=")
	builder.WriteString(wdc.Username)
	builder.WriteString(", ")
	builder.WriteString("password=")
	builder.WriteString(wdc.Password)
	builder.WriteByte(')')
	return builder.String()
}

// WebDAVConfigs is a parsable slice of WebDAVConfig.
type WebDAVConfigs []*WebDAVConfig
