// Code generated by ent, DO NOT EDIT.

package webdavconfig

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ca-x/vaultwarden-syncer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldLTE(FieldID, id))
}

// URL applies equality check predicate on the "url" field. It's identical to URLEQ.
func URL(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEQ(FieldURL, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEQ(FieldPassword, v))
}

// URLEQ applies the EQ predicate on the "url" field.
func URLEQ(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEQ(FieldURL, v))
}

// URLNEQ applies the NEQ predicate on the "url" field.
func URLNEQ(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldNEQ(FieldURL, v))
}

// URLIn applies the In predicate on the "url" field.
func URLIn(vs ...string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldIn(FieldURL, vs...))
}

// URLNotIn applies the NotIn predicate on the "url" field.
func URLNotIn(vs ...string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldNotIn(FieldURL, vs...))
}

// URLGT applies the GT predicate on the "url" field.
func URLGT(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldGT(FieldURL, v))
}

// URLGTE applies the GTE predicate on the "url" field.
func URLGTE(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldGTE(FieldURL, v))
}

// URLLT applies the LT predicate on the "url" field.
func URLLT(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldLT(FieldURL, v))
}

// URLLTE applies the LTE predicate on the "url" field.
func URLLTE(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldLTE(FieldURL, v))
}

// URLContains applies the Contains predicate on the "url" field.
func URLContains(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldContains(FieldURL, v))
}

// URLHasPrefix applies the HasPrefix predicate on the "url" field.
func URLHasPrefix(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldHasPrefix(FieldURL, v))
}

// URLHasSuffix applies the HasSuffix predicate on the "url" field.
func URLHasSuffix(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldHasSuffix(FieldURL, v))
}

// URLEqualFold applies the EqualFold predicate on the "url" field.
func URLEqualFold(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEqualFold(FieldURL, v))
}

// URLContainsFold applies the ContainsFold predicate on the "url" field.
func URLContainsFold(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldContainsFold(FieldURL, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.FieldContainsFold(FieldPassword, v))
}

// HasStorage applies the HasEdge predicate on the "storage" edge.
func HasStorage() predicate.WebDAVConfig {
	return predicate.WebDAVConfig(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StorageTable, StorageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStorageWith applies the HasEdge predicate on the "storage" edge with a given conditions (other predicates).
func HasStorageWith(preds ...predicate.Storage) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(func(s *sql.Selector) {
		step := newStorageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WebDAVConfig) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WebDAVConfig) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WebDAVConfig) predicate.WebDAVConfig {
	return predicate.WebDAVConfig(sql.NotPredicates(p))
}
