// Code generated by ent, DO NOT EDIT.

package webdavconfig

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the webdavconfig type in the database.
	Label = "web_dav_config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldURL holds the string denoting the url field in the database.
	FieldURL = "url"
	// FieldUsername holds the string denoting the username field in the database.
	FieldUsername = "username"
	// FieldPassword holds the string denoting the password field in the database.
	FieldPassword = "password"
	// EdgeStorage holds the string denoting the storage edge name in mutations.
	EdgeStorage = "storage"
	// Table holds the table name of the webdavconfig in the database.
	Table = "web_dav_configs"
	// StorageTable is the table that holds the storage relation/edge.
	StorageTable = "web_dav_configs"
	// StorageInverseTable is the table name for the Storage entity.
	// It exists in this package in order to avoid circular dependency with the "storage" package.
	StorageInverseTable = "storages"
	// StorageColumn is the table column denoting the storage relation/edge.
	StorageColumn = "storage_webdav_config"
)

// Columns holds all SQL columns for webdavconfig fields.
var Columns = []string{
	FieldID,
	FieldURL,
	FieldUsername,
	FieldPassword,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "web_dav_configs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"storage_webdav_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the WebDAVConfig queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByURL orders the results by the url field.
func ByURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldURL, opts...).ToFunc()
}

// ByUsername orders the results by the username field.
func ByUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsername, opts...).ToFunc()
}

// ByPassword orders the results by the password field.
func ByPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPassword, opts...).ToFunc()
}

// ByStorageField orders the results by storage field.
func ByStorageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStorageStep(), sql.OrderByField(field, opts...))
	}
}
func newStorageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StorageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, StorageTable, StorageColumn),
	)
}
