// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ca-x/vaultwarden-syncer/ent/predicate"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/syncjob"
)

// SyncJobUpdate is the builder for updating SyncJob entities.
type SyncJobUpdate struct {
	config
	hooks    []Hook
	mutation *SyncJobMutation
}

// Where appends a list predicates to the SyncJobUpdate builder.
func (sju *SyncJobUpdate) Where(ps ...predicate.SyncJob) *SyncJobUpdate {
	sju.mutation.Where(ps...)
	return sju
}

// SetStatus sets the "status" field.
func (sju *SyncJobUpdate) SetStatus(s syncjob.Status) *SyncJobUpdate {
	sju.mutation.SetStatus(s)
	return sju
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sju *SyncJobUpdate) SetNillableStatus(s *syncjob.Status) *SyncJobUpdate {
	if s != nil {
		sju.SetStatus(*s)
	}
	return sju
}

// SetOperation sets the "operation" field.
func (sju *SyncJobUpdate) SetOperation(s syncjob.Operation) *SyncJobUpdate {
	sju.mutation.SetOperation(s)
	return sju
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (sju *SyncJobUpdate) SetNillableOperation(s *syncjob.Operation) *SyncJobUpdate {
	if s != nil {
		sju.SetOperation(*s)
	}
	return sju
}

// SetMessage sets the "message" field.
func (sju *SyncJobUpdate) SetMessage(s string) *SyncJobUpdate {
	sju.mutation.SetMessage(s)
	return sju
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (sju *SyncJobUpdate) SetNillableMessage(s *string) *SyncJobUpdate {
	if s != nil {
		sju.SetMessage(*s)
	}
	return sju
}

// ClearMessage clears the value of the "message" field.
func (sju *SyncJobUpdate) ClearMessage() *SyncJobUpdate {
	sju.mutation.ClearMessage()
	return sju
}

// SetStartedAt sets the "started_at" field.
func (sju *SyncJobUpdate) SetStartedAt(t time.Time) *SyncJobUpdate {
	sju.mutation.SetStartedAt(t)
	return sju
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sju *SyncJobUpdate) SetNillableStartedAt(t *time.Time) *SyncJobUpdate {
	if t != nil {
		sju.SetStartedAt(*t)
	}
	return sju
}

// ClearStartedAt clears the value of the "started_at" field.
func (sju *SyncJobUpdate) ClearStartedAt() *SyncJobUpdate {
	sju.mutation.ClearStartedAt()
	return sju
}

// SetCompletedAt sets the "completed_at" field.
func (sju *SyncJobUpdate) SetCompletedAt(t time.Time) *SyncJobUpdate {
	sju.mutation.SetCompletedAt(t)
	return sju
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (sju *SyncJobUpdate) SetNillableCompletedAt(t *time.Time) *SyncJobUpdate {
	if t != nil {
		sju.SetCompletedAt(*t)
	}
	return sju
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (sju *SyncJobUpdate) ClearCompletedAt() *SyncJobUpdate {
	sju.mutation.ClearCompletedAt()
	return sju
}

// SetCreatedAt sets the "created_at" field.
func (sju *SyncJobUpdate) SetCreatedAt(t time.Time) *SyncJobUpdate {
	sju.mutation.SetCreatedAt(t)
	return sju
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sju *SyncJobUpdate) SetNillableCreatedAt(t *time.Time) *SyncJobUpdate {
	if t != nil {
		sju.SetCreatedAt(*t)
	}
	return sju
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (sju *SyncJobUpdate) SetStorageID(id int) *SyncJobUpdate {
	sju.mutation.SetStorageID(id)
	return sju
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (sju *SyncJobUpdate) SetNillableStorageID(id *int) *SyncJobUpdate {
	if id != nil {
		sju = sju.SetStorageID(*id)
	}
	return sju
}

// SetStorage sets the "storage" edge to the Storage entity.
func (sju *SyncJobUpdate) SetStorage(s *Storage) *SyncJobUpdate {
	return sju.SetStorageID(s.ID)
}

// Mutation returns the SyncJobMutation object of the builder.
func (sju *SyncJobUpdate) Mutation() *SyncJobMutation {
	return sju.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (sju *SyncJobUpdate) ClearStorage() *SyncJobUpdate {
	sju.mutation.ClearStorage()
	return sju
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (sju *SyncJobUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, sju.sqlSave, sju.mutation, sju.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sju *SyncJobUpdate) SaveX(ctx context.Context) int {
	affected, err := sju.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (sju *SyncJobUpdate) Exec(ctx context.Context) error {
	_, err := sju.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sju *SyncJobUpdate) ExecX(ctx context.Context) {
	if err := sju.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sju *SyncJobUpdate) check() error {
	if v, ok := sju.mutation.Status(); ok {
		if err := syncjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SyncJob.status": %w`, err)}
		}
	}
	if v, ok := sju.mutation.Operation(); ok {
		if err := syncjob.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "SyncJob.operation": %w`, err)}
		}
	}
	return nil
}

func (sju *SyncJobUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := sju.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(syncjob.Table, syncjob.Columns, sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt))
	if ps := sju.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sju.mutation.Status(); ok {
		_spec.SetField(syncjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sju.mutation.Operation(); ok {
		_spec.SetField(syncjob.FieldOperation, field.TypeEnum, value)
	}
	if value, ok := sju.mutation.Message(); ok {
		_spec.SetField(syncjob.FieldMessage, field.TypeString, value)
	}
	if sju.mutation.MessageCleared() {
		_spec.ClearField(syncjob.FieldMessage, field.TypeString)
	}
	if value, ok := sju.mutation.StartedAt(); ok {
		_spec.SetField(syncjob.FieldStartedAt, field.TypeTime, value)
	}
	if sju.mutation.StartedAtCleared() {
		_spec.ClearField(syncjob.FieldStartedAt, field.TypeTime)
	}
	if value, ok := sju.mutation.CompletedAt(); ok {
		_spec.SetField(syncjob.FieldCompletedAt, field.TypeTime, value)
	}
	if sju.mutation.CompletedAtCleared() {
		_spec.ClearField(syncjob.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := sju.mutation.CreatedAt(); ok {
		_spec.SetField(syncjob.FieldCreatedAt, field.TypeTime, value)
	}
	if sju.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   syncjob.StorageTable,
			Columns: []string{syncjob.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sju.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   syncjob.StorageTable,
			Columns: []string{syncjob.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, sju.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syncjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	sju.mutation.done = true
	return n, nil
}

// SyncJobUpdateOne is the builder for updating a single SyncJob entity.
type SyncJobUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SyncJobMutation
}

// SetStatus sets the "status" field.
func (sjuo *SyncJobUpdateOne) SetStatus(s syncjob.Status) *SyncJobUpdateOne {
	sjuo.mutation.SetStatus(s)
	return sjuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (sjuo *SyncJobUpdateOne) SetNillableStatus(s *syncjob.Status) *SyncJobUpdateOne {
	if s != nil {
		sjuo.SetStatus(*s)
	}
	return sjuo
}

// SetOperation sets the "operation" field.
func (sjuo *SyncJobUpdateOne) SetOperation(s syncjob.Operation) *SyncJobUpdateOne {
	sjuo.mutation.SetOperation(s)
	return sjuo
}

// SetNillableOperation sets the "operation" field if the given value is not nil.
func (sjuo *SyncJobUpdateOne) SetNillableOperation(s *syncjob.Operation) *SyncJobUpdateOne {
	if s != nil {
		sjuo.SetOperation(*s)
	}
	return sjuo
}

// SetMessage sets the "message" field.
func (sjuo *SyncJobUpdateOne) SetMessage(s string) *SyncJobUpdateOne {
	sjuo.mutation.SetMessage(s)
	return sjuo
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (sjuo *SyncJobUpdateOne) SetNillableMessage(s *string) *SyncJobUpdateOne {
	if s != nil {
		sjuo.SetMessage(*s)
	}
	return sjuo
}

// ClearMessage clears the value of the "message" field.
func (sjuo *SyncJobUpdateOne) ClearMessage() *SyncJobUpdateOne {
	sjuo.mutation.ClearMessage()
	return sjuo
}

// SetStartedAt sets the "started_at" field.
func (sjuo *SyncJobUpdateOne) SetStartedAt(t time.Time) *SyncJobUpdateOne {
	sjuo.mutation.SetStartedAt(t)
	return sjuo
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sjuo *SyncJobUpdateOne) SetNillableStartedAt(t *time.Time) *SyncJobUpdateOne {
	if t != nil {
		sjuo.SetStartedAt(*t)
	}
	return sjuo
}

// ClearStartedAt clears the value of the "started_at" field.
func (sjuo *SyncJobUpdateOne) ClearStartedAt() *SyncJobUpdateOne {
	sjuo.mutation.ClearStartedAt()
	return sjuo
}

// SetCompletedAt sets the "completed_at" field.
func (sjuo *SyncJobUpdateOne) SetCompletedAt(t time.Time) *SyncJobUpdateOne {
	sjuo.mutation.SetCompletedAt(t)
	return sjuo
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (sjuo *SyncJobUpdateOne) SetNillableCompletedAt(t *time.Time) *SyncJobUpdateOne {
	if t != nil {
		sjuo.SetCompletedAt(*t)
	}
	return sjuo
}

// ClearCompletedAt clears the value of the "completed_at" field.
func (sjuo *SyncJobUpdateOne) ClearCompletedAt() *SyncJobUpdateOne {
	sjuo.mutation.ClearCompletedAt()
	return sjuo
}

// SetCreatedAt sets the "created_at" field.
func (sjuo *SyncJobUpdateOne) SetCreatedAt(t time.Time) *SyncJobUpdateOne {
	sjuo.mutation.SetCreatedAt(t)
	return sjuo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sjuo *SyncJobUpdateOne) SetNillableCreatedAt(t *time.Time) *SyncJobUpdateOne {
	if t != nil {
		sjuo.SetCreatedAt(*t)
	}
	return sjuo
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (sjuo *SyncJobUpdateOne) SetStorageID(id int) *SyncJobUpdateOne {
	sjuo.mutation.SetStorageID(id)
	return sjuo
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (sjuo *SyncJobUpdateOne) SetNillableStorageID(id *int) *SyncJobUpdateOne {
	if id != nil {
		sjuo = sjuo.SetStorageID(*id)
	}
	return sjuo
}

// SetStorage sets the "storage" edge to the Storage entity.
func (sjuo *SyncJobUpdateOne) SetStorage(s *Storage) *SyncJobUpdateOne {
	return sjuo.SetStorageID(s.ID)
}

// Mutation returns the SyncJobMutation object of the builder.
func (sjuo *SyncJobUpdateOne) Mutation() *SyncJobMutation {
	return sjuo.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (sjuo *SyncJobUpdateOne) ClearStorage() *SyncJobUpdateOne {
	sjuo.mutation.ClearStorage()
	return sjuo
}

// Where appends a list predicates to the SyncJobUpdate builder.
func (sjuo *SyncJobUpdateOne) Where(ps ...predicate.SyncJob) *SyncJobUpdateOne {
	sjuo.mutation.Where(ps...)
	return sjuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (sjuo *SyncJobUpdateOne) Select(field string, fields ...string) *SyncJobUpdateOne {
	sjuo.fields = append([]string{field}, fields...)
	return sjuo
}

// Save executes the query and returns the updated SyncJob entity.
func (sjuo *SyncJobUpdateOne) Save(ctx context.Context) (*SyncJob, error) {
	return withHooks(ctx, sjuo.sqlSave, sjuo.mutation, sjuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (sjuo *SyncJobUpdateOne) SaveX(ctx context.Context) *SyncJob {
	node, err := sjuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (sjuo *SyncJobUpdateOne) Exec(ctx context.Context) error {
	_, err := sjuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjuo *SyncJobUpdateOne) ExecX(ctx context.Context) {
	if err := sjuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjuo *SyncJobUpdateOne) check() error {
	if v, ok := sjuo.mutation.Status(); ok {
		if err := syncjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SyncJob.status": %w`, err)}
		}
	}
	if v, ok := sjuo.mutation.Operation(); ok {
		if err := syncjob.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "SyncJob.operation": %w`, err)}
		}
	}
	return nil
}

func (sjuo *SyncJobUpdateOne) sqlSave(ctx context.Context) (_node *SyncJob, err error) {
	if err := sjuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(syncjob.Table, syncjob.Columns, sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt))
	id, ok := sjuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SyncJob.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := sjuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, syncjob.FieldID)
		for _, f := range fields {
			if !syncjob.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != syncjob.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := sjuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := sjuo.mutation.Status(); ok {
		_spec.SetField(syncjob.FieldStatus, field.TypeEnum, value)
	}
	if value, ok := sjuo.mutation.Operation(); ok {
		_spec.SetField(syncjob.FieldOperation, field.TypeEnum, value)
	}
	if value, ok := sjuo.mutation.Message(); ok {
		_spec.SetField(syncjob.FieldMessage, field.TypeString, value)
	}
	if sjuo.mutation.MessageCleared() {
		_spec.ClearField(syncjob.FieldMessage, field.TypeString)
	}
	if value, ok := sjuo.mutation.StartedAt(); ok {
		_spec.SetField(syncjob.FieldStartedAt, field.TypeTime, value)
	}
	if sjuo.mutation.StartedAtCleared() {
		_spec.ClearField(syncjob.FieldStartedAt, field.TypeTime)
	}
	if value, ok := sjuo.mutation.CompletedAt(); ok {
		_spec.SetField(syncjob.FieldCompletedAt, field.TypeTime, value)
	}
	if sjuo.mutation.CompletedAtCleared() {
		_spec.ClearField(syncjob.FieldCompletedAt, field.TypeTime)
	}
	if value, ok := sjuo.mutation.CreatedAt(); ok {
		_spec.SetField(syncjob.FieldCreatedAt, field.TypeTime, value)
	}
	if sjuo.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   syncjob.StorageTable,
			Columns: []string{syncjob.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := sjuo.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   syncjob.StorageTable,
			Columns: []string{syncjob.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &SyncJob{config: sjuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, sjuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{syncjob.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	sjuo.mutation.done = true
	return _node, nil
}
