// Code generated by ent, DO NOT EDIT.

package s3config

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the s3config type in the database.
	Label = "s3config"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEndpoint holds the string denoting the endpoint field in the database.
	FieldEndpoint = "endpoint"
	// FieldAccessKeyID holds the string denoting the access_key_id field in the database.
	FieldAccessKeyID = "access_key_id"
	// FieldSecretAccessKey holds the string denoting the secret_access_key field in the database.
	FieldSecretAccessKey = "secret_access_key"
	// FieldRegion holds the string denoting the region field in the database.
	FieldRegion = "region"
	// FieldBucket holds the string denoting the bucket field in the database.
	FieldBucket = "bucket"
	// EdgeStorage holds the string denoting the storage edge name in mutations.
	EdgeStorage = "storage"
	// Table holds the table name of the s3config in the database.
	Table = "s3configs"
	// StorageTable is the table that holds the storage relation/edge.
	StorageTable = "s3configs"
	// StorageInverseTable is the table name for the Storage entity.
	// It exists in this package in order to avoid circular dependency with the "storage" package.
	StorageInverseTable = "storages"
	// StorageColumn is the table column denoting the storage relation/edge.
	StorageColumn = "storage_s3_config"
)

// Columns holds all SQL columns for s3config fields.
var Columns = []string{
	FieldID,
	FieldEndpoint,
	FieldAccessKeyID,
	FieldSecretAccessKey,
	FieldRegion,
	FieldBucket,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "s3configs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"storage_s3_config",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the S3Config queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEndpoint orders the results by the endpoint field.
func ByEndpoint(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndpoint, opts...).ToFunc()
}

// ByAccessKeyID orders the results by the access_key_id field.
func ByAccessKeyID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAccessKeyID, opts...).ToFunc()
}

// BySecretAccessKey orders the results by the secret_access_key field.
func BySecretAccessKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSecretAccessKey, opts...).ToFunc()
}

// ByRegion orders the results by the region field.
func ByRegion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegion, opts...).ToFunc()
}

// ByBucket orders the results by the bucket field.
func ByBucket(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldBucket, opts...).ToFunc()
}

// ByStorageField orders the results by storage field.
func ByStorageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStorageStep(), sql.OrderByField(field, opts...))
	}
}
func newStorageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StorageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, StorageTable, StorageColumn),
	)
}
