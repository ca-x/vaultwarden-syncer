// Code generated by ent, DO NOT EDIT.

package s3config

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ca-x/vaultwarden-syncer/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.S3Config {
	return predicate.S3Config(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.S3Config {
	return predicate.S3Config(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.S3Config {
	return predicate.S3Config(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.S3Config {
	return predicate.S3Config(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.S3Config {
	return predicate.S3Config(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.S3Config {
	return predicate.S3Config(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.S3Config {
	return predicate.S3Config(sql.FieldLTE(FieldID, id))
}

// Endpoint applies equality check predicate on the "endpoint" field. It's identical to EndpointEQ.
func Endpoint(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldEndpoint, v))
}

// AccessKeyID applies equality check predicate on the "access_key_id" field. It's identical to AccessKeyIDEQ.
func AccessKeyID(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldAccessKeyID, v))
}

// SecretAccessKey applies equality check predicate on the "secret_access_key" field. It's identical to SecretAccessKeyEQ.
func SecretAccessKey(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldSecretAccessKey, v))
}

// Region applies equality check predicate on the "region" field. It's identical to RegionEQ.
func Region(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldRegion, v))
}

// Bucket applies equality check predicate on the "bucket" field. It's identical to BucketEQ.
func Bucket(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldBucket, v))
}

// EndpointEQ applies the EQ predicate on the "endpoint" field.
func EndpointEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldEndpoint, v))
}

// EndpointNEQ applies the NEQ predicate on the "endpoint" field.
func EndpointNEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNEQ(FieldEndpoint, v))
}

// EndpointIn applies the In predicate on the "endpoint" field.
func EndpointIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldIn(FieldEndpoint, vs...))
}

// EndpointNotIn applies the NotIn predicate on the "endpoint" field.
func EndpointNotIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNotIn(FieldEndpoint, vs...))
}

// EndpointGT applies the GT predicate on the "endpoint" field.
func EndpointGT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGT(FieldEndpoint, v))
}

// EndpointGTE applies the GTE predicate on the "endpoint" field.
func EndpointGTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGTE(FieldEndpoint, v))
}

// EndpointLT applies the LT predicate on the "endpoint" field.
func EndpointLT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLT(FieldEndpoint, v))
}

// EndpointLTE applies the LTE predicate on the "endpoint" field.
func EndpointLTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLTE(FieldEndpoint, v))
}

// EndpointContains applies the Contains predicate on the "endpoint" field.
func EndpointContains(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContains(FieldEndpoint, v))
}

// EndpointHasPrefix applies the HasPrefix predicate on the "endpoint" field.
func EndpointHasPrefix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasPrefix(FieldEndpoint, v))
}

// EndpointHasSuffix applies the HasSuffix predicate on the "endpoint" field.
func EndpointHasSuffix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasSuffix(FieldEndpoint, v))
}

// EndpointIsNil applies the IsNil predicate on the "endpoint" field.
func EndpointIsNil() predicate.S3Config {
	return predicate.S3Config(sql.FieldIsNull(FieldEndpoint))
}

// EndpointNotNil applies the NotNil predicate on the "endpoint" field.
func EndpointNotNil() predicate.S3Config {
	return predicate.S3Config(sql.FieldNotNull(FieldEndpoint))
}

// EndpointEqualFold applies the EqualFold predicate on the "endpoint" field.
func EndpointEqualFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEqualFold(FieldEndpoint, v))
}

// EndpointContainsFold applies the ContainsFold predicate on the "endpoint" field.
func EndpointContainsFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContainsFold(FieldEndpoint, v))
}

// AccessKeyIDEQ applies the EQ predicate on the "access_key_id" field.
func AccessKeyIDEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldAccessKeyID, v))
}

// AccessKeyIDNEQ applies the NEQ predicate on the "access_key_id" field.
func AccessKeyIDNEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNEQ(FieldAccessKeyID, v))
}

// AccessKeyIDIn applies the In predicate on the "access_key_id" field.
func AccessKeyIDIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldIn(FieldAccessKeyID, vs...))
}

// AccessKeyIDNotIn applies the NotIn predicate on the "access_key_id" field.
func AccessKeyIDNotIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNotIn(FieldAccessKeyID, vs...))
}

// AccessKeyIDGT applies the GT predicate on the "access_key_id" field.
func AccessKeyIDGT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGT(FieldAccessKeyID, v))
}

// AccessKeyIDGTE applies the GTE predicate on the "access_key_id" field.
func AccessKeyIDGTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGTE(FieldAccessKeyID, v))
}

// AccessKeyIDLT applies the LT predicate on the "access_key_id" field.
func AccessKeyIDLT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLT(FieldAccessKeyID, v))
}

// AccessKeyIDLTE applies the LTE predicate on the "access_key_id" field.
func AccessKeyIDLTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLTE(FieldAccessKeyID, v))
}

// AccessKeyIDContains applies the Contains predicate on the "access_key_id" field.
func AccessKeyIDContains(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContains(FieldAccessKeyID, v))
}

// AccessKeyIDHasPrefix applies the HasPrefix predicate on the "access_key_id" field.
func AccessKeyIDHasPrefix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasPrefix(FieldAccessKeyID, v))
}

// AccessKeyIDHasSuffix applies the HasSuffix predicate on the "access_key_id" field.
func AccessKeyIDHasSuffix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasSuffix(FieldAccessKeyID, v))
}

// AccessKeyIDEqualFold applies the EqualFold predicate on the "access_key_id" field.
func AccessKeyIDEqualFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEqualFold(FieldAccessKeyID, v))
}

// AccessKeyIDContainsFold applies the ContainsFold predicate on the "access_key_id" field.
func AccessKeyIDContainsFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContainsFold(FieldAccessKeyID, v))
}

// SecretAccessKeyEQ applies the EQ predicate on the "secret_access_key" field.
func SecretAccessKeyEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldSecretAccessKey, v))
}

// SecretAccessKeyNEQ applies the NEQ predicate on the "secret_access_key" field.
func SecretAccessKeyNEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNEQ(FieldSecretAccessKey, v))
}

// SecretAccessKeyIn applies the In predicate on the "secret_access_key" field.
func SecretAccessKeyIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldIn(FieldSecretAccessKey, vs...))
}

// SecretAccessKeyNotIn applies the NotIn predicate on the "secret_access_key" field.
func SecretAccessKeyNotIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNotIn(FieldSecretAccessKey, vs...))
}

// SecretAccessKeyGT applies the GT predicate on the "secret_access_key" field.
func SecretAccessKeyGT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGT(FieldSecretAccessKey, v))
}

// SecretAccessKeyGTE applies the GTE predicate on the "secret_access_key" field.
func SecretAccessKeyGTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGTE(FieldSecretAccessKey, v))
}

// SecretAccessKeyLT applies the LT predicate on the "secret_access_key" field.
func SecretAccessKeyLT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLT(FieldSecretAccessKey, v))
}

// SecretAccessKeyLTE applies the LTE predicate on the "secret_access_key" field.
func SecretAccessKeyLTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLTE(FieldSecretAccessKey, v))
}

// SecretAccessKeyContains applies the Contains predicate on the "secret_access_key" field.
func SecretAccessKeyContains(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContains(FieldSecretAccessKey, v))
}

// SecretAccessKeyHasPrefix applies the HasPrefix predicate on the "secret_access_key" field.
func SecretAccessKeyHasPrefix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasPrefix(FieldSecretAccessKey, v))
}

// SecretAccessKeyHasSuffix applies the HasSuffix predicate on the "secret_access_key" field.
func SecretAccessKeyHasSuffix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasSuffix(FieldSecretAccessKey, v))
}

// SecretAccessKeyEqualFold applies the EqualFold predicate on the "secret_access_key" field.
func SecretAccessKeyEqualFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEqualFold(FieldSecretAccessKey, v))
}

// SecretAccessKeyContainsFold applies the ContainsFold predicate on the "secret_access_key" field.
func SecretAccessKeyContainsFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContainsFold(FieldSecretAccessKey, v))
}

// RegionEQ applies the EQ predicate on the "region" field.
func RegionEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldRegion, v))
}

// RegionNEQ applies the NEQ predicate on the "region" field.
func RegionNEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNEQ(FieldRegion, v))
}

// RegionIn applies the In predicate on the "region" field.
func RegionIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldIn(FieldRegion, vs...))
}

// RegionNotIn applies the NotIn predicate on the "region" field.
func RegionNotIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNotIn(FieldRegion, vs...))
}

// RegionGT applies the GT predicate on the "region" field.
func RegionGT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGT(FieldRegion, v))
}

// RegionGTE applies the GTE predicate on the "region" field.
func RegionGTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGTE(FieldRegion, v))
}

// RegionLT applies the LT predicate on the "region" field.
func RegionLT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLT(FieldRegion, v))
}

// RegionLTE applies the LTE predicate on the "region" field.
func RegionLTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLTE(FieldRegion, v))
}

// RegionContains applies the Contains predicate on the "region" field.
func RegionContains(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContains(FieldRegion, v))
}

// RegionHasPrefix applies the HasPrefix predicate on the "region" field.
func RegionHasPrefix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasPrefix(FieldRegion, v))
}

// RegionHasSuffix applies the HasSuffix predicate on the "region" field.
func RegionHasSuffix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasSuffix(FieldRegion, v))
}

// RegionEqualFold applies the EqualFold predicate on the "region" field.
func RegionEqualFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEqualFold(FieldRegion, v))
}

// RegionContainsFold applies the ContainsFold predicate on the "region" field.
func RegionContainsFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContainsFold(FieldRegion, v))
}

// BucketEQ applies the EQ predicate on the "bucket" field.
func BucketEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEQ(FieldBucket, v))
}

// BucketNEQ applies the NEQ predicate on the "bucket" field.
func BucketNEQ(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNEQ(FieldBucket, v))
}

// BucketIn applies the In predicate on the "bucket" field.
func BucketIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldIn(FieldBucket, vs...))
}

// BucketNotIn applies the NotIn predicate on the "bucket" field.
func BucketNotIn(vs ...string) predicate.S3Config {
	return predicate.S3Config(sql.FieldNotIn(FieldBucket, vs...))
}

// BucketGT applies the GT predicate on the "bucket" field.
func BucketGT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGT(FieldBucket, v))
}

// BucketGTE applies the GTE predicate on the "bucket" field.
func BucketGTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldGTE(FieldBucket, v))
}

// BucketLT applies the LT predicate on the "bucket" field.
func BucketLT(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLT(FieldBucket, v))
}

// BucketLTE applies the LTE predicate on the "bucket" field.
func BucketLTE(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldLTE(FieldBucket, v))
}

// BucketContains applies the Contains predicate on the "bucket" field.
func BucketContains(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContains(FieldBucket, v))
}

// BucketHasPrefix applies the HasPrefix predicate on the "bucket" field.
func BucketHasPrefix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasPrefix(FieldBucket, v))
}

// BucketHasSuffix applies the HasSuffix predicate on the "bucket" field.
func BucketHasSuffix(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldHasSuffix(FieldBucket, v))
}

// BucketEqualFold applies the EqualFold predicate on the "bucket" field.
func BucketEqualFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldEqualFold(FieldBucket, v))
}

// BucketContainsFold applies the ContainsFold predicate on the "bucket" field.
func BucketContainsFold(v string) predicate.S3Config {
	return predicate.S3Config(sql.FieldContainsFold(FieldBucket, v))
}

// HasStorage applies the HasEdge predicate on the "storage" edge.
func HasStorage() predicate.S3Config {
	return predicate.S3Config(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, StorageTable, StorageColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasStorageWith applies the HasEdge predicate on the "storage" edge with a given conditions (other predicates).
func HasStorageWith(preds ...predicate.Storage) predicate.S3Config {
	return predicate.S3Config(func(s *sql.Selector) {
		step := newStorageStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.S3Config) predicate.S3Config {
	return predicate.S3Config(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.S3Config) predicate.S3Config {
	return predicate.S3Config(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.S3Config) predicate.S3Config {
	return predicate.S3Config(sql.NotPredicates(p))
}
