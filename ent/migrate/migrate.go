// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"context"
	"fmt"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "username", Type: field.TypeString, Unique: true},
		{Name: "password", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
		{Name: "is_admin", Type: field.TypeBool, Default: false},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
	}
	
	// StoragesColumns holds the columns for the "storages" table.
	StoragesColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString, Unique: true},
		{Name: "type", Type: field.TypeEnum, Enums: []string{"webdav", "s3"}},
		{Name: "config", Type: field.TypeJSON},
		{Name: "enabled", Type: field.TypeBool, Default: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime},
	}
	// StoragesTable holds the schema information for the "storages" table.
	StoragesTable = &schema.Table{
		Name:       "storages",
		Columns:    StoragesColumns,
		PrimaryKey: []*schema.Column{StoragesColumns[0]},
	}
	
	// SyncJobsColumns holds the columns for the "sync_jobs" table.
	SyncJobsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "status", Type: field.TypeEnum, Enums: []string{"pending", "running", "completed", "failed"}},
		{Name: "operation", Type: field.TypeEnum, Enums: []string{"backup", "restore"}},
		{Name: "message", Type: field.TypeText, Nullable: true},
		{Name: "started_at", Type: field.TypeTime, Nullable: true},
		{Name: "completed_at", Type: field.TypeTime, Nullable: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// SyncJobsTable holds the schema information for the "sync_jobs" table.
	SyncJobsTable = &schema.Table{
		Name:       "sync_jobs",
		Columns:    SyncJobsColumns,
		PrimaryKey: []*schema.Column{SyncJobsColumns[0]},
	}
	
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		UsersTable,
		StoragesTable,
		SyncJobsTable,
	}
)

// Schema is the schema type for the database.
type Schema struct {
	drv dialect.Driver
}

// NewSchema creates a new schema client.
func NewSchema(drv dialect.Driver) *Schema { return &Schema{drv: drv} }

// Create creates all table resources using the schema package.
func (s *Schema) Create(ctx context.Context, opts ...schema.MigrateOption) error {
	migrate, err := schema.NewMigrate(s.drv, opts...)
	if err != nil {
		return fmt.Errorf("ent/migrate: %w", err)
	}
	return migrate.Create(ctx, Tables...)
}

// WriteTo writes the schema changes to w instead of the database.
func (s *Schema) WriteTo(ctx context.Context, w dialect.Writer, opts ...schema.MigrateOption) error {
	drv := &schema.WriteDriver{
		Writer: w,
		Driver: s.drv,
	}
	migrate, err := schema.NewMigrate(drv, opts...)
	if err != nil {
		return fmt.Errorf("ent/migrate: %w", err)
	}
	return migrate.Create(ctx, Tables...)
}