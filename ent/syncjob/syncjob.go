// Code generated by ent, DO NOT EDIT.

package syncjob

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the syncjob type in the database.
	Label = "sync_job"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldStatus holds the string denoting the status field in the database.
	FieldStatus = "status"
	// FieldOperation holds the string denoting the operation field in the database.
	FieldOperation = "operation"
	// FieldMessage holds the string denoting the message field in the database.
	FieldMessage = "message"
	// FieldStartedAt holds the string denoting the started_at field in the database.
	FieldStartedAt = "started_at"
	// FieldCompletedAt holds the string denoting the completed_at field in the database.
	FieldCompletedAt = "completed_at"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// EdgeStorage holds the string denoting the storage edge name in mutations.
	EdgeStorage = "storage"
	// Table holds the table name of the syncjob in the database.
	Table = "sync_jobs"
	// StorageTable is the table that holds the storage relation/edge.
	StorageTable = "sync_jobs"
	// StorageInverseTable is the table name for the Storage entity.
	// It exists in this package in order to avoid circular dependency with the "storage" package.
	StorageInverseTable = "storages"
	// StorageColumn is the table column denoting the storage relation/edge.
	StorageColumn = "storage_sync_jobs"
)

// Columns holds all SQL columns for syncjob fields.
var Columns = []string{
	FieldID,
	FieldStatus,
	FieldOperation,
	FieldMessage,
	FieldStartedAt,
	FieldCompletedAt,
	FieldCreatedAt,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "sync_jobs"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"storage_sync_jobs",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
)

// Status defines the type for the "status" enum field.
type Status string

// Status values.
const (
	StatusPending   Status = "pending"
	StatusRunning   Status = "running"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
)

func (s Status) String() string {
	return string(s)
}

// StatusValidator is a validator for the "status" field enum values. It is called by the builders before save.
func StatusValidator(s Status) error {
	switch s {
	case StatusPending, StatusRunning, StatusCompleted, StatusFailed:
		return nil
	default:
		return fmt.Errorf("syncjob: invalid enum value for status field: %q", s)
	}
}

// Operation defines the type for the "operation" enum field.
type Operation string

// Operation values.
const (
	OperationBackup  Operation = "backup"
	OperationRestore Operation = "restore"
)

func (o Operation) String() string {
	return string(o)
}

// OperationValidator is a validator for the "operation" field enum values. It is called by the builders before save.
func OperationValidator(o Operation) error {
	switch o {
	case OperationBackup, OperationRestore:
		return nil
	default:
		return fmt.Errorf("syncjob: invalid enum value for operation field: %q", o)
	}
}

// OrderOption defines the ordering options for the SyncJob queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByStatus orders the results by the status field.
func ByStatus(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStatus, opts...).ToFunc()
}

// ByOperation orders the results by the operation field.
func ByOperation(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOperation, opts...).ToFunc()
}

// ByMessage orders the results by the message field.
func ByMessage(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMessage, opts...).ToFunc()
}

// ByStartedAt orders the results by the started_at field.
func ByStartedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldStartedAt, opts...).ToFunc()
}

// ByCompletedAt orders the results by the completed_at field.
func ByCompletedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCompletedAt, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByStorageField orders the results by storage field.
func ByStorageField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newStorageStep(), sql.OrderByField(field, opts...))
	}
}
func newStorageStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(StorageInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, StorageTable, StorageColumn),
	)
}
