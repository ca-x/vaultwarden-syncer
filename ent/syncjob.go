// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/syncjob"
)

// SyncJob is the model entity for the SyncJob schema.
type SyncJob struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status syncjob.Status `json:"status,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation syncjob.Operation `json:"operation,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt time.Time `json:"completed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the SyncJobQuery when eager-loading is set.
	Edges             SyncJobEdges `json:"edges"`
	storage_sync_jobs *int
	selectValues      sql.SelectValues
}

// SyncJobEdges holds the relations/edges for other nodes in the graph.
type SyncJobEdges struct {
	// Storage holds the value of the storage edge.
	Storage *Storage `json:"storage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// StorageOrErr returns the Storage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e SyncJobEdges) StorageOrErr() (*Storage, error) {
	if e.Storage != nil {
		return e.Storage, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: storage.Label}
	}
	return nil, &NotLoadedError{edge: "storage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SyncJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case syncjob.FieldID:
			values[i] = new(sql.NullInt64)
		case syncjob.FieldStatus, syncjob.FieldOperation, syncjob.FieldMessage:
			values[i] = new(sql.NullString)
		case syncjob.FieldStartedAt, syncjob.FieldCompletedAt, syncjob.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case syncjob.ForeignKeys[0]: // storage_sync_jobs
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SyncJob fields.
func (_m *SyncJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syncjob.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			_m.ID = int(value.Int64)
		case syncjob.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				_m.Status = syncjob.Status(value.String)
			}
		case syncjob.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				_m.Operation = syncjob.Operation(value.String)
			}
		case syncjob.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				_m.Message = value.String
			}
		case syncjob.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				_m.StartedAt = value.Time
			}
		case syncjob.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				_m.CompletedAt = value.Time
			}
		case syncjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				_m.CreatedAt = value.Time
			}
		case syncjob.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field storage_sync_jobs", value)
			} else if value.Valid {
				_m.storage_sync_jobs = new(int)
				*_m.storage_sync_jobs = int(value.Int64)
			}
		default:
			_m.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SyncJob.
// This includes values selected through modifiers, order, etc.
func (_m *SyncJob) Value(name string) (ent.Value, error) {
	return _m.selectValues.Get(name)
}

// QueryStorage queries the "storage" edge of the SyncJob entity.
func (_m *SyncJob) QueryStorage() *StorageQuery {
	return NewSyncJobClient(_m.config).QueryStorage(_m)
}

// Update returns a builder for updating this SyncJob.
// Note that you need to call SyncJob.Unwrap() before calling this method if this SyncJob
// was returned from a transaction, and the transaction was committed or rolled back.
func (_m *SyncJob) Update() *SyncJobUpdateOne {
	return NewSyncJobClient(_m.config).UpdateOne(_m)
}

// Unwrap unwraps the SyncJob entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (_m *SyncJob) Unwrap() *SyncJob {
	_tx, ok := _m.config.driver.(*txDriver)
	if !ok {
		panic("ent: SyncJob is not a transactional entity")
	}
	_m.config.driver = _tx.drv
	return _m
}

// String implements the fmt.Stringer.
func (_m *SyncJob) String() string {
	var builder strings.Builder
	builder.WriteString("SyncJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", _m.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", _m.Status))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", _m.Operation))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(_m.Message)
	builder.WriteString(", ")
	builder.WriteString("started_at=")
	builder.WriteString(_m.StartedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("completed_at=")
	builder.WriteString(_m.CompletedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(_m.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SyncJobs is a parsable slice of SyncJob.
type SyncJobs []*SyncJob
