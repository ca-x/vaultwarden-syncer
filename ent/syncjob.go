// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ca-x/vaultwarden-syncer/ent/syncjob"
)

// SyncJob is the model entity for the SyncJob schema.
type SyncJob struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Status holds the value of the "status" field.
	Status syncjob.Status `json:"status,omitempty"`
	// Operation holds the value of the "operation" field.
	Operation syncjob.Operation `json:"operation,omitempty"`
	// Message holds the value of the "message" field.
	Message string `json:"message,omitempty"`
	// StartedAt holds the value of the "started_at" field.
	StartedAt *time.Time `json:"started_at,omitempty"`
	// CompletedAt holds the value of the "completed_at" field.
	CompletedAt *time.Time `json:"completed_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt    time.Time `json:"created_at,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*SyncJob) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case syncjob.FieldID:
			values[i] = new(sql.NullInt64)
		case syncjob.FieldStatus, syncjob.FieldOperation, syncjob.FieldMessage:
			values[i] = new(sql.NullString)
		case syncjob.FieldStartedAt, syncjob.FieldCompletedAt, syncjob.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the SyncJob fields.
func (sj *SyncJob) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case syncjob.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			sj.ID = int(value.Int64)
		case syncjob.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				sj.Status = syncjob.Status(value.String)
			}
		case syncjob.FieldOperation:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field operation", values[i])
			} else if value.Valid {
				sj.Operation = syncjob.Operation(value.String)
			}
		case syncjob.FieldMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field message", values[i])
			} else if value.Valid {
				sj.Message = value.String
			}
		case syncjob.FieldStartedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field started_at", values[i])
			} else if value.Valid {
				sj.StartedAt = new(time.Time)
				*sj.StartedAt = value.Time
			}
		case syncjob.FieldCompletedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field completed_at", values[i])
			} else if value.Valid {
				sj.CompletedAt = new(time.Time)
				*sj.CompletedAt = value.Time
			}
		case syncjob.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				sj.CreatedAt = value.Time
			}
		default:
			sj.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the SyncJob.
// This includes values selected through modifiers, order, etc.
func (sj *SyncJob) Value(name string) (ent.Value, error) {
	return sj.selectValues.Get(name)
}

// String implements the fmt.Stringer.
func (sj *SyncJob) String() string {
	var builder strings.Builder
	builder.WriteString("SyncJob(")
	builder.WriteString(fmt.Sprintf("id=%v, ", sj.ID))
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", sj.Status))
	builder.WriteString(", ")
	builder.WriteString("operation=")
	builder.WriteString(fmt.Sprintf("%v", sj.Operation))
	builder.WriteString(", ")
	builder.WriteString("message=")
	builder.WriteString(sj.Message)
	builder.WriteString(", ")
	if v := sj.StartedAt; v != nil {
		builder.WriteString("started_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	if v := sj.CompletedAt; v != nil {
		builder.WriteString("completed_at=")
		builder.WriteString(v.Format(time.ANSIC))
	}
	builder.WriteString(", ")
	builder.WriteString("created_at=")
	builder.WriteString(sj.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// SyncJobs is a parsable slice of SyncJob.
type SyncJobs []*SyncJob

// IsValue implements the driver Valuer interface.
func (sj *SyncJob) IsValue() {}