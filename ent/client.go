// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"
	"reflect"

	"github.com/ca-x/vaultwarden-syncer/ent/migrate"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ca-x/vaultwarden-syncer/ent/s3config"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/syncjob"
	"github.com/ca-x/vaultwarden-syncer/ent/user"
	"github.com/ca-x/vaultwarden-syncer/ent/webdavconfig"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// S3Config is the client for interacting with the S3Config builders.
	S3Config *S3ConfigClient
	// Storage is the client for interacting with the Storage builders.
	Storage *StorageClient
	// SyncJob is the client for interacting with the SyncJob builders.
	SyncJob *SyncJobClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// WebDAVConfig is the client for interacting with the WebDAVConfig builders.
	WebDAVConfig *WebDAVConfigClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	client := &Client{config: newConfig(opts...)}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.S3Config = NewS3ConfigClient(c.config)
	c.Storage = NewStorageClient(c.config)
	c.SyncJob = NewSyncJobClient(c.config)
	c.User = NewUserClient(c.config)
	c.WebDAVConfig = NewWebDAVConfigClient(c.config)
}

type (
	// config is the configuration for the client and its builder.
	config struct {
		// driver used for executing database requests.
		driver dialect.Driver
		// debug enable a debug logging.
		debug bool
		// log used for logging on debug mode.
		log func(...any)
		// hooks to execute on mutations.
		hooks *hooks
		// interceptors to execute on queries.
		inters *inters
	}
	// Option function to configure the client.
	Option func(*config)
)

// newConfig creates a new config for the client.
func newConfig(opts ...Option) config {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	return cfg
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Debug enables debug logging on the ent.Driver.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// Log sets the logging function for debug mode.
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// ErrTxStarted is returned when trying to start a new transaction from a transactional client.
var ErrTxStarted = errors.New("ent: cannot start a transaction within a transaction")

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, ErrTxStarted
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		S3Config:     NewS3ConfigClient(cfg),
		Storage:      NewStorageClient(cfg),
		SyncJob:      NewSyncJobClient(cfg),
		User:         NewUserClient(cfg),
		WebDAVConfig: NewWebDAVConfigClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:          ctx,
		config:       cfg,
		S3Config:     NewS3ConfigClient(cfg),
		Storage:      NewStorageClient(cfg),
		SyncJob:      NewSyncJobClient(cfg),
		User:         NewUserClient(cfg),
		WebDAVConfig: NewWebDAVConfigClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		S3Config.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.S3Config.Use(hooks...)
	c.Storage.Use(hooks...)
	c.SyncJob.Use(hooks...)
	c.User.Use(hooks...)
	c.WebDAVConfig.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
// In order to add interceptors to a specific client, call: `client.Node.Intercept(...)`.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.S3Config.Intercept(interceptors...)
	c.Storage.Intercept(interceptors...)
	c.SyncJob.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
	c.WebDAVConfig.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *S3ConfigMutation:
		return c.S3Config.mutate(ctx, m)
	case *StorageMutation:
		return c.Storage.mutate(ctx, m)
	case *SyncJobMutation:
		return c.SyncJob.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	case *WebDAVConfigMutation:
		return c.WebDAVConfig.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// S3ConfigClient is a client for the S3Config schema.
type S3ConfigClient struct {
	config
}

// NewS3ConfigClient returns a client for the S3Config from the given config.
func NewS3ConfigClient(c config) *S3ConfigClient {
	return &S3ConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `s3config.Hooks(f(g(h())))`.
func (c *S3ConfigClient) Use(hooks ...Hook) {
	c.hooks.S3Config = append(c.hooks.S3Config, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `s3config.Intercept(f(g(h())))`.
func (c *S3ConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.S3Config = append(c.inters.S3Config, interceptors...)
}

// Create returns a builder for creating a S3Config entity.
func (c *S3ConfigClient) Create() *S3ConfigCreate {
	mutation := newS3ConfigMutation(c.config, OpCreate)
	return &S3ConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of S3Config entities.
func (c *S3ConfigClient) CreateBulk(builders ...*S3ConfigCreate) *S3ConfigCreateBulk {
	return &S3ConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *S3ConfigClient) MapCreateBulk(slice any, setFunc func(*S3ConfigCreate, int)) *S3ConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &S3ConfigCreateBulk{err: fmt.Errorf("calling to S3ConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*S3ConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &S3ConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for S3Config.
func (c *S3ConfigClient) Update() *S3ConfigUpdate {
	mutation := newS3ConfigMutation(c.config, OpUpdate)
	return &S3ConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *S3ConfigClient) UpdateOne(s *S3Config) *S3ConfigUpdateOne {
	mutation := newS3ConfigMutation(c.config, OpUpdateOne, withS3Config(s))
	return &S3ConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *S3ConfigClient) UpdateOneID(id int) *S3ConfigUpdateOne {
	mutation := newS3ConfigMutation(c.config, OpUpdateOne, withS3ConfigID(id))
	return &S3ConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for S3Config.
func (c *S3ConfigClient) Delete() *S3ConfigDelete {
	mutation := newS3ConfigMutation(c.config, OpDelete)
	return &S3ConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *S3ConfigClient) DeleteOne(s *S3Config) *S3ConfigDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *S3ConfigClient) DeleteOneID(id int) *S3ConfigDeleteOne {
	builder := c.Delete().Where(s3config.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &S3ConfigDeleteOne{builder}
}

// Query returns a query builder for S3Config.
func (c *S3ConfigClient) Query() *S3ConfigQuery {
	return &S3ConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeS3Config},
		inters: c.Interceptors(),
	}
}

// Get returns a S3Config entity by its id.
func (c *S3ConfigClient) Get(ctx context.Context, id int) (*S3Config, error) {
	return c.Query().Where(s3config.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *S3ConfigClient) GetX(ctx context.Context, id int) *S3Config {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStorage queries the storage edge of a S3Config.
func (c *S3ConfigClient) QueryStorage(s *S3Config) *StorageQuery {
	query := (&StorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(s3config.Table, s3config.FieldID, id),
			sqlgraph.To(storage.Table, storage.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, s3config.StorageTable, s3config.StorageColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *S3ConfigClient) Hooks() []Hook {
	return c.hooks.S3Config
}

// Interceptors returns the client interceptors.
func (c *S3ConfigClient) Interceptors() []Interceptor {
	return c.inters.S3Config
}

func (c *S3ConfigClient) mutate(ctx context.Context, m *S3ConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&S3ConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&S3ConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&S3ConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&S3ConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown S3Config mutation op: %q", m.Op())
	}
}

// StorageClient is a client for the Storage schema.
type StorageClient struct {
	config
}

// NewStorageClient returns a client for the Storage from the given config.
func NewStorageClient(c config) *StorageClient {
	return &StorageClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `storage.Hooks(f(g(h())))`.
func (c *StorageClient) Use(hooks ...Hook) {
	c.hooks.Storage = append(c.hooks.Storage, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `storage.Intercept(f(g(h())))`.
func (c *StorageClient) Intercept(interceptors ...Interceptor) {
	c.inters.Storage = append(c.inters.Storage, interceptors...)
}

// Create returns a builder for creating a Storage entity.
func (c *StorageClient) Create() *StorageCreate {
	mutation := newStorageMutation(c.config, OpCreate)
	return &StorageCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Storage entities.
func (c *StorageClient) CreateBulk(builders ...*StorageCreate) *StorageCreateBulk {
	return &StorageCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *StorageClient) MapCreateBulk(slice any, setFunc func(*StorageCreate, int)) *StorageCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &StorageCreateBulk{err: fmt.Errorf("calling to StorageClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*StorageCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &StorageCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Storage.
func (c *StorageClient) Update() *StorageUpdate {
	mutation := newStorageMutation(c.config, OpUpdate)
	return &StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *StorageClient) UpdateOne(s *Storage) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorage(s))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *StorageClient) UpdateOneID(id int) *StorageUpdateOne {
	mutation := newStorageMutation(c.config, OpUpdateOne, withStorageID(id))
	return &StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Storage.
func (c *StorageClient) Delete() *StorageDelete {
	mutation := newStorageMutation(c.config, OpDelete)
	return &StorageDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *StorageClient) DeleteOne(s *Storage) *StorageDeleteOne {
	return c.DeleteOneID(s.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *StorageClient) DeleteOneID(id int) *StorageDeleteOne {
	builder := c.Delete().Where(storage.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &StorageDeleteOne{builder}
}

// Query returns a query builder for Storage.
func (c *StorageClient) Query() *StorageQuery {
	return &StorageQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeStorage},
		inters: c.Interceptors(),
	}
}

// Get returns a Storage entity by its id.
func (c *StorageClient) Get(ctx context.Context, id int) (*Storage, error) {
	return c.Query().Where(storage.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *StorageClient) GetX(ctx context.Context, id int) *Storage {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QuerySyncJobs queries the sync_jobs edge of a Storage.
func (c *StorageClient) QuerySyncJobs(s *Storage) *SyncJobQuery {
	query := (&SyncJobClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(storage.Table, storage.FieldID, id),
			sqlgraph.To(syncjob.Table, syncjob.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, storage.SyncJobsTable, storage.SyncJobsColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryWebdavConfig queries the webdav_config edge of a Storage.
func (c *StorageClient) QueryWebdavConfig(s *Storage) *WebDAVConfigQuery {
	query := (&WebDAVConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(storage.Table, storage.FieldID, id),
			sqlgraph.To(webdavconfig.Table, webdavconfig.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, storage.WebdavConfigTable, storage.WebdavConfigColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryS3Config queries the s3_config edge of a Storage.
func (c *StorageClient) QueryS3Config(s *Storage) *S3ConfigQuery {
	query := (&S3ConfigClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := s.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(storage.Table, storage.FieldID, id),
			sqlgraph.To(s3config.Table, s3config.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, false, storage.S3ConfigTable, storage.S3ConfigColumn),
		)
		fromV = sqlgraph.Neighbors(s.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *StorageClient) Hooks() []Hook {
	return c.hooks.Storage
}

// Interceptors returns the client interceptors.
func (c *StorageClient) Interceptors() []Interceptor {
	return c.inters.Storage
}

func (c *StorageClient) mutate(ctx context.Context, m *StorageMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&StorageCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&StorageUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&StorageUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&StorageDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown Storage mutation op: %q", m.Op())
	}
}

// SyncJobClient is a client for the SyncJob schema.
type SyncJobClient struct {
	config
}

// NewSyncJobClient returns a client for the SyncJob from the given config.
func NewSyncJobClient(c config) *SyncJobClient {
	return &SyncJobClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `syncjob.Hooks(f(g(h())))`.
func (c *SyncJobClient) Use(hooks ...Hook) {
	c.hooks.SyncJob = append(c.hooks.SyncJob, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `syncjob.Intercept(f(g(h())))`.
func (c *SyncJobClient) Intercept(interceptors ...Interceptor) {
	c.inters.SyncJob = append(c.inters.SyncJob, interceptors...)
}

// Create returns a builder for creating a SyncJob entity.
func (c *SyncJobClient) Create() *SyncJobCreate {
	mutation := newSyncJobMutation(c.config, OpCreate)
	return &SyncJobCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of SyncJob entities.
func (c *SyncJobClient) CreateBulk(builders ...*SyncJobCreate) *SyncJobCreateBulk {
	return &SyncJobCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *SyncJobClient) MapCreateBulk(slice any, setFunc func(*SyncJobCreate, int)) *SyncJobCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &SyncJobCreateBulk{err: fmt.Errorf("calling to SyncJobClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*SyncJobCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &SyncJobCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for SyncJob.
func (c *SyncJobClient) Update() *SyncJobUpdate {
	mutation := newSyncJobMutation(c.config, OpUpdate)
	return &SyncJobUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *SyncJobClient) UpdateOne(sj *SyncJob) *SyncJobUpdateOne {
	mutation := newSyncJobMutation(c.config, OpUpdateOne, withSyncJob(sj))
	return &SyncJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *SyncJobClient) UpdateOneID(id int) *SyncJobUpdateOne {
	mutation := newSyncJobMutation(c.config, OpUpdateOne, withSyncJobID(id))
	return &SyncJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for SyncJob.
func (c *SyncJobClient) Delete() *SyncJobDelete {
	mutation := newSyncJobMutation(c.config, OpDelete)
	return &SyncJobDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *SyncJobClient) DeleteOne(sj *SyncJob) *SyncJobDeleteOne {
	return c.DeleteOneID(sj.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *SyncJobClient) DeleteOneID(id int) *SyncJobDeleteOne {
	builder := c.Delete().Where(syncjob.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &SyncJobDeleteOne{builder}
}

// Query returns a query builder for SyncJob.
func (c *SyncJobClient) Query() *SyncJobQuery {
	return &SyncJobQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeSyncJob},
		inters: c.Interceptors(),
	}
}

// Get returns a SyncJob entity by its id.
func (c *SyncJobClient) Get(ctx context.Context, id int) (*SyncJob, error) {
	return c.Query().Where(syncjob.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *SyncJobClient) GetX(ctx context.Context, id int) *SyncJob {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStorage queries the storage edge of a SyncJob.
func (c *SyncJobClient) QueryStorage(sj *SyncJob) *StorageQuery {
	query := (&StorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := sj.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(syncjob.Table, syncjob.FieldID, id),
			sqlgraph.To(storage.Table, storage.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, syncjob.StorageTable, syncjob.StorageColumn),
		)
		fromV = sqlgraph.Neighbors(sj.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *SyncJobClient) Hooks() []Hook {
	return c.hooks.SyncJob
}

// Interceptors returns the client interceptors.
func (c *SyncJobClient) Interceptors() []Interceptor {
	return c.inters.SyncJob
}

func (c *SyncJobClient) mutate(ctx context.Context, m *SyncJobMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&SyncJobCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&SyncJobUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&SyncJobUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&SyncJobDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown SyncJob mutation op: %q", m.Op())
	}
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `user.Intercept(f(g(h())))`.
func (c *UserClient) Intercept(interceptors ...Interceptor) {
	c.inters.User = append(c.inters.User, interceptors...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *UserClient) MapCreateBulk(slice any, setFunc func(*UserCreate, int)) *UserCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &UserCreateBulk{err: fmt.Errorf("calling to UserClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*UserCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeUser},
		inters: c.Interceptors(),
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}

// Interceptors returns the client interceptors.
func (c *UserClient) Interceptors() []Interceptor {
	return c.inters.User
}

func (c *UserClient) mutate(ctx context.Context, m *UserMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&UserCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&UserUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&UserDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown User mutation op: %q", m.Op())
	}
}

// WebDAVConfigClient is a client for the WebDAVConfig schema.
type WebDAVConfigClient struct {
	config
}

// NewWebDAVConfigClient returns a client for the WebDAVConfig from the given config.
func NewWebDAVConfigClient(c config) *WebDAVConfigClient {
	return &WebDAVConfigClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `webdavconfig.Hooks(f(g(h())))`.
func (c *WebDAVConfigClient) Use(hooks ...Hook) {
	c.hooks.WebDAVConfig = append(c.hooks.WebDAVConfig, hooks...)
}

// Intercept adds a list of query interceptors to the interceptors stack.
// A call to `Intercept(f, g, h)` equals to `webdavconfig.Intercept(f(g(h())))`.
func (c *WebDAVConfigClient) Intercept(interceptors ...Interceptor) {
	c.inters.WebDAVConfig = append(c.inters.WebDAVConfig, interceptors...)
}

// Create returns a builder for creating a WebDAVConfig entity.
func (c *WebDAVConfigClient) Create() *WebDAVConfigCreate {
	mutation := newWebDAVConfigMutation(c.config, OpCreate)
	return &WebDAVConfigCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of WebDAVConfig entities.
func (c *WebDAVConfigClient) CreateBulk(builders ...*WebDAVConfigCreate) *WebDAVConfigCreateBulk {
	return &WebDAVConfigCreateBulk{config: c.config, builders: builders}
}

// MapCreateBulk creates a bulk creation builder from the given slice. For each item in the slice, the function creates
// a builder and applies setFunc on it.
func (c *WebDAVConfigClient) MapCreateBulk(slice any, setFunc func(*WebDAVConfigCreate, int)) *WebDAVConfigCreateBulk {
	rv := reflect.ValueOf(slice)
	if rv.Kind() != reflect.Slice {
		return &WebDAVConfigCreateBulk{err: fmt.Errorf("calling to WebDAVConfigClient.MapCreateBulk with wrong type %T, need slice", slice)}
	}
	builders := make([]*WebDAVConfigCreate, rv.Len())
	for i := 0; i < rv.Len(); i++ {
		builders[i] = c.Create()
		setFunc(builders[i], i)
	}
	return &WebDAVConfigCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for WebDAVConfig.
func (c *WebDAVConfigClient) Update() *WebDAVConfigUpdate {
	mutation := newWebDAVConfigMutation(c.config, OpUpdate)
	return &WebDAVConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *WebDAVConfigClient) UpdateOne(wdc *WebDAVConfig) *WebDAVConfigUpdateOne {
	mutation := newWebDAVConfigMutation(c.config, OpUpdateOne, withWebDAVConfig(wdc))
	return &WebDAVConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *WebDAVConfigClient) UpdateOneID(id int) *WebDAVConfigUpdateOne {
	mutation := newWebDAVConfigMutation(c.config, OpUpdateOne, withWebDAVConfigID(id))
	return &WebDAVConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for WebDAVConfig.
func (c *WebDAVConfigClient) Delete() *WebDAVConfigDelete {
	mutation := newWebDAVConfigMutation(c.config, OpDelete)
	return &WebDAVConfigDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *WebDAVConfigClient) DeleteOne(wdc *WebDAVConfig) *WebDAVConfigDeleteOne {
	return c.DeleteOneID(wdc.ID)
}

// DeleteOneID returns a builder for deleting the given entity by its id.
func (c *WebDAVConfigClient) DeleteOneID(id int) *WebDAVConfigDeleteOne {
	builder := c.Delete().Where(webdavconfig.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &WebDAVConfigDeleteOne{builder}
}

// Query returns a query builder for WebDAVConfig.
func (c *WebDAVConfigClient) Query() *WebDAVConfigQuery {
	return &WebDAVConfigQuery{
		config: c.config,
		ctx:    &QueryContext{Type: TypeWebDAVConfig},
		inters: c.Interceptors(),
	}
}

// Get returns a WebDAVConfig entity by its id.
func (c *WebDAVConfigClient) Get(ctx context.Context, id int) (*WebDAVConfig, error) {
	return c.Query().Where(webdavconfig.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *WebDAVConfigClient) GetX(ctx context.Context, id int) *WebDAVConfig {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryStorage queries the storage edge of a WebDAVConfig.
func (c *WebDAVConfigClient) QueryStorage(wdc *WebDAVConfig) *StorageQuery {
	query := (&StorageClient{config: c.config}).Query()
	query.path = func(context.Context) (fromV *sql.Selector, _ error) {
		id := wdc.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(webdavconfig.Table, webdavconfig.FieldID, id),
			sqlgraph.To(storage.Table, storage.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, webdavconfig.StorageTable, webdavconfig.StorageColumn),
		)
		fromV = sqlgraph.Neighbors(wdc.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *WebDAVConfigClient) Hooks() []Hook {
	return c.hooks.WebDAVConfig
}

// Interceptors returns the client interceptors.
func (c *WebDAVConfigClient) Interceptors() []Interceptor {
	return c.inters.WebDAVConfig
}

func (c *WebDAVConfigClient) mutate(ctx context.Context, m *WebDAVConfigMutation) (Value, error) {
	switch m.Op() {
	case OpCreate:
		return (&WebDAVConfigCreate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdate:
		return (&WebDAVConfigUpdate{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpUpdateOne:
		return (&WebDAVConfigUpdateOne{config: c.config, hooks: c.Hooks(), mutation: m}).Save(ctx)
	case OpDelete, OpDeleteOne:
		return (&WebDAVConfigDelete{config: c.config, hooks: c.Hooks(), mutation: m}).Exec(ctx)
	default:
		return nil, fmt.Errorf("ent: unknown WebDAVConfig mutation op: %q", m.Op())
	}
}

// hooks and interceptors per client, for fast access.
type (
	hooks struct {
		S3Config, Storage, SyncJob, User, WebDAVConfig []ent.Hook
	}
	inters struct {
		S3Config, Storage, SyncJob, User, WebDAVConfig []ent.Interceptor
	}
)
