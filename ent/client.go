// This file will be regenerated by ent generate

import (
	"context"
	"database/sql/driver"
	"fmt"
	"log"

	"github.com/ca-x/vaultwarden-syncer/ent/migrate"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/syncjob"
	"github.com/ca-x/vaultwarden-syncer/ent/user"

	"entgo.io/ent"
	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Storage is the client for interacting with the Storage builders.
	Storage *StorageClient
	// SyncJob is the client for interacting with the SyncJob builders.
	SyncJob *SyncJobClient
	// User is the client for interacting with the User builders.
	User *UserClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}, inters: &inters{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Storage: NewStorageClient(cfg),
		SyncJob: NewSyncJobClient(cfg),
		User:    NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:     ctx,
		config:  cfg,
		Storage: NewStorageClient(cfg),
		SyncJob: NewSyncJobClient(cfg),
		User:    NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-mode client. All the query paths are logged.
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.debug = true
	cfg.log = func(a ...any) { log.Println(a...) }
	return &Client{config: cfg}
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
func (c *Client) Use(hooks ...Hook) {
	c.Storage.Use(hooks...)
	c.SyncJob.Use(hooks...)
	c.User.Use(hooks...)
}

// Intercept adds the query interceptors to all the entity clients.
func (c *Client) Intercept(interceptors ...Interceptor) {
	c.Storage.Intercept(interceptors...)
	c.SyncJob.Intercept(interceptors...)
	c.User.Intercept(interceptors...)
}

// Mutate implements the ent.Mutator interface.
func (c *Client) Mutate(ctx context.Context, m Mutation) (Value, error) {
	switch m := m.(type) {
	case *StorageMutation:
		return c.Storage.mutate(ctx, m)
	case *SyncJobMutation:
		return c.SyncJob.mutate(ctx, m)
	case *UserMutation:
		return c.User.mutate(ctx, m)
	default:
		return nil, fmt.Errorf("ent: unknown mutation type %T", m)
	}
}

// config is the configuration for the client and its builder.
type config struct {
	driver  dialect.Driver
	debug   bool
	log     func(...any)
	hooks   *hooks
	inters  *inters
}

// options applies the options on the config object.
func (c *config) options(opts ...Option) {
	for _, opt := range opts {
		opt(c)
	}
	if c.debug {
		c.driver = dialect.Debug(c.driver, c.log)
	}
}

// Option function to configure the client.
type Option func(*config)

// Driver configures the client driver.
func Driver(driver dialect.Driver) Option {
	return func(c *config) {
		c.driver = driver
	}
}

// Log configures the log function (defaults to log.Println).
func Log(fn func(...any)) Option {
	return func(c *config) {
		c.log = fn
	}
}

// Debug enables debug mode for the client.
func Debug() Option {
	return func(c *config) {
		c.debug = true
	}
}

// init initializes the Storage, SyncJob and User clients.
func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Storage = NewStorageClient(c.config)
	c.SyncJob = NewSyncJobClient(c.config)
	c.User = NewUserClient(c.config)
}

// Value is the interface that groups all value types.
type Value interface {
	IsValue()
}

type Mutation interface {
	ent.Mutation
}

type Hook = ent.Hook
type Interceptor = ent.Interceptor

func newTx(ctx context.Context, driver dialect.Driver) (dialect.Tx, error) {
	if _, ok := driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, ok := driver.(interface {
		Tx(context.Context) (dialect.Tx, error)
	})
	if !ok {
		return nil, fmt.Errorf("ent: driver does not support transactions")
	}
	return tx.Tx(ctx)
}

type txDriver struct {
	tx  dialect.Tx
	drv dialect.Driver
}

func (tx *txDriver) Exec(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Exec(ctx, query, args, v)
}

func (tx *txDriver) Query(ctx context.Context, query string, args, v interface{}) error {
	return tx.tx.Query(ctx, query, args, v)
}

func (tx *txDriver) Dialect() string {
	return tx.drv.Dialect()
}

func (tx *txDriver) Close() error { return nil }

type hooks struct {
	Storage []ent.Hook
	SyncJob []ent.Hook
	User    []ent.Hook
}

type inters struct {
	Storage []ent.Interceptor
	SyncJob []ent.Interceptor
	User    []ent.Interceptor
}