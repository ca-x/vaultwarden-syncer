// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/syncjob"
)

// SyncJobCreate is the builder for creating a SyncJob entity.
type SyncJobCreate struct {
	config
	mutation *SyncJobMutation
	hooks    []Hook
}

// SetStatus sets the "status" field.
func (sjc *SyncJobCreate) SetStatus(s syncjob.Status) *SyncJobCreate {
	sjc.mutation.SetStatus(s)
	return sjc
}

// SetOperation sets the "operation" field.
func (sjc *SyncJobCreate) SetOperation(s syncjob.Operation) *SyncJobCreate {
	sjc.mutation.SetOperation(s)
	return sjc
}

// SetMessage sets the "message" field.
func (sjc *SyncJobCreate) SetMessage(s string) *SyncJobCreate {
	sjc.mutation.SetMessage(s)
	return sjc
}

// SetNillableMessage sets the "message" field if the given value is not nil.
func (sjc *SyncJobCreate) SetNillableMessage(s *string) *SyncJobCreate {
	if s != nil {
		sjc.SetMessage(*s)
	}
	return sjc
}

// SetStartedAt sets the "started_at" field.
func (sjc *SyncJobCreate) SetStartedAt(t time.Time) *SyncJobCreate {
	sjc.mutation.SetStartedAt(t)
	return sjc
}

// SetNillableStartedAt sets the "started_at" field if the given value is not nil.
func (sjc *SyncJobCreate) SetNillableStartedAt(t *time.Time) *SyncJobCreate {
	if t != nil {
		sjc.SetStartedAt(*t)
	}
	return sjc
}

// SetCompletedAt sets the "completed_at" field.
func (sjc *SyncJobCreate) SetCompletedAt(t time.Time) *SyncJobCreate {
	sjc.mutation.SetCompletedAt(t)
	return sjc
}

// SetNillableCompletedAt sets the "completed_at" field if the given value is not nil.
func (sjc *SyncJobCreate) SetNillableCompletedAt(t *time.Time) *SyncJobCreate {
	if t != nil {
		sjc.SetCompletedAt(*t)
	}
	return sjc
}

// SetCreatedAt sets the "created_at" field.
func (sjc *SyncJobCreate) SetCreatedAt(t time.Time) *SyncJobCreate {
	sjc.mutation.SetCreatedAt(t)
	return sjc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (sjc *SyncJobCreate) SetNillableCreatedAt(t *time.Time) *SyncJobCreate {
	if t != nil {
		sjc.SetCreatedAt(*t)
	}
	return sjc
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (sjc *SyncJobCreate) SetStorageID(id int) *SyncJobCreate {
	sjc.mutation.SetStorageID(id)
	return sjc
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (sjc *SyncJobCreate) SetNillableStorageID(id *int) *SyncJobCreate {
	if id != nil {
		sjc = sjc.SetStorageID(*id)
	}
	return sjc
}

// SetStorage sets the "storage" edge to the Storage entity.
func (sjc *SyncJobCreate) SetStorage(s *Storage) *SyncJobCreate {
	return sjc.SetStorageID(s.ID)
}

// Mutation returns the SyncJobMutation object of the builder.
func (sjc *SyncJobCreate) Mutation() *SyncJobMutation {
	return sjc.mutation
}

// Save creates the SyncJob in the database.
func (sjc *SyncJobCreate) Save(ctx context.Context) (*SyncJob, error) {
	sjc.defaults()
	return withHooks(ctx, sjc.sqlSave, sjc.mutation, sjc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sjc *SyncJobCreate) SaveX(ctx context.Context) *SyncJob {
	v, err := sjc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjc *SyncJobCreate) Exec(ctx context.Context) error {
	_, err := sjc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjc *SyncJobCreate) ExecX(ctx context.Context) {
	if err := sjc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (sjc *SyncJobCreate) defaults() {
	if _, ok := sjc.mutation.CreatedAt(); !ok {
		v := syncjob.DefaultCreatedAt()
		sjc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sjc *SyncJobCreate) check() error {
	if _, ok := sjc.mutation.Status(); !ok {
		return &ValidationError{Name: "status", err: errors.New(`ent: missing required field "SyncJob.status"`)}
	}
	if v, ok := sjc.mutation.Status(); ok {
		if err := syncjob.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "SyncJob.status": %w`, err)}
		}
	}
	if _, ok := sjc.mutation.Operation(); !ok {
		return &ValidationError{Name: "operation", err: errors.New(`ent: missing required field "SyncJob.operation"`)}
	}
	if v, ok := sjc.mutation.Operation(); ok {
		if err := syncjob.OperationValidator(v); err != nil {
			return &ValidationError{Name: "operation", err: fmt.Errorf(`ent: validator failed for field "SyncJob.operation": %w`, err)}
		}
	}
	if _, ok := sjc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "SyncJob.created_at"`)}
	}
	return nil
}

func (sjc *SyncJobCreate) sqlSave(ctx context.Context) (*SyncJob, error) {
	if err := sjc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sjc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sjc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sjc.mutation.id = &_node.ID
	sjc.mutation.done = true
	return _node, nil
}

func (sjc *SyncJobCreate) createSpec() (*SyncJob, *sqlgraph.CreateSpec) {
	var (
		_node = &SyncJob{config: sjc.config}
		_spec = sqlgraph.NewCreateSpec(syncjob.Table, sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt))
	)
	if value, ok := sjc.mutation.Status(); ok {
		_spec.SetField(syncjob.FieldStatus, field.TypeEnum, value)
		_node.Status = value
	}
	if value, ok := sjc.mutation.Operation(); ok {
		_spec.SetField(syncjob.FieldOperation, field.TypeEnum, value)
		_node.Operation = value
	}
	if value, ok := sjc.mutation.Message(); ok {
		_spec.SetField(syncjob.FieldMessage, field.TypeString, value)
		_node.Message = value
	}
	if value, ok := sjc.mutation.StartedAt(); ok {
		_spec.SetField(syncjob.FieldStartedAt, field.TypeTime, value)
		_node.StartedAt = value
	}
	if value, ok := sjc.mutation.CompletedAt(); ok {
		_spec.SetField(syncjob.FieldCompletedAt, field.TypeTime, value)
		_node.CompletedAt = value
	}
	if value, ok := sjc.mutation.CreatedAt(); ok {
		_spec.SetField(syncjob.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := sjc.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   syncjob.StorageTable,
			Columns: []string{syncjob.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.storage_sync_jobs = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// SyncJobCreateBulk is the builder for creating many SyncJob entities in bulk.
type SyncJobCreateBulk struct {
	config
	err      error
	builders []*SyncJobCreate
}

// Save creates the SyncJob entities in the database.
func (sjcb *SyncJobCreateBulk) Save(ctx context.Context) ([]*SyncJob, error) {
	if sjcb.err != nil {
		return nil, sjcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(sjcb.builders))
	nodes := make([]*SyncJob, len(sjcb.builders))
	mutators := make([]Mutator, len(sjcb.builders))
	for i := range sjcb.builders {
		func(i int, root context.Context) {
			builder := sjcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SyncJobMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, sjcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, sjcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, sjcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (sjcb *SyncJobCreateBulk) SaveX(ctx context.Context) []*SyncJob {
	v, err := sjcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sjcb *SyncJobCreateBulk) Exec(ctx context.Context) error {
	_, err := sjcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sjcb *SyncJobCreateBulk) ExecX(ctx context.Context) {
	if err := sjcb.Exec(ctx); err != nil {
		panic(err)
	}
}
