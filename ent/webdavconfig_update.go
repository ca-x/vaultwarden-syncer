// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ca-x/vaultwarden-syncer/ent/predicate"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/webdavconfig"
)

// WebDAVConfigUpdate is the builder for updating WebDAVConfig entities.
type WebDAVConfigUpdate struct {
	config
	hooks    []Hook
	mutation *WebDAVConfigMutation
}

// Where appends a list predicates to the WebDAVConfigUpdate builder.
func (wdcu *WebDAVConfigUpdate) Where(ps ...predicate.WebDAVConfig) *WebDAVConfigUpdate {
	wdcu.mutation.Where(ps...)
	return wdcu
}

// SetURL sets the "url" field.
func (wdcu *WebDAVConfigUpdate) SetURL(s string) *WebDAVConfigUpdate {
	wdcu.mutation.SetURL(s)
	return wdcu
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (wdcu *WebDAVConfigUpdate) SetNillableURL(s *string) *WebDAVConfigUpdate {
	if s != nil {
		wdcu.SetURL(*s)
	}
	return wdcu
}

// SetUsername sets the "username" field.
func (wdcu *WebDAVConfigUpdate) SetUsername(s string) *WebDAVConfigUpdate {
	wdcu.mutation.SetUsername(s)
	return wdcu
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (wdcu *WebDAVConfigUpdate) SetNillableUsername(s *string) *WebDAVConfigUpdate {
	if s != nil {
		wdcu.SetUsername(*s)
	}
	return wdcu
}

// SetPassword sets the "password" field.
func (wdcu *WebDAVConfigUpdate) SetPassword(s string) *WebDAVConfigUpdate {
	wdcu.mutation.SetPassword(s)
	return wdcu
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (wdcu *WebDAVConfigUpdate) SetNillablePassword(s *string) *WebDAVConfigUpdate {
	if s != nil {
		wdcu.SetPassword(*s)
	}
	return wdcu
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (wdcu *WebDAVConfigUpdate) SetStorageID(id int) *WebDAVConfigUpdate {
	wdcu.mutation.SetStorageID(id)
	return wdcu
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (wdcu *WebDAVConfigUpdate) SetNillableStorageID(id *int) *WebDAVConfigUpdate {
	if id != nil {
		wdcu = wdcu.SetStorageID(*id)
	}
	return wdcu
}

// SetStorage sets the "storage" edge to the Storage entity.
func (wdcu *WebDAVConfigUpdate) SetStorage(s *Storage) *WebDAVConfigUpdate {
	return wdcu.SetStorageID(s.ID)
}

// Mutation returns the WebDAVConfigMutation object of the builder.
func (wdcu *WebDAVConfigUpdate) Mutation() *WebDAVConfigMutation {
	return wdcu.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (wdcu *WebDAVConfigUpdate) ClearStorage() *WebDAVConfigUpdate {
	wdcu.mutation.ClearStorage()
	return wdcu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wdcu *WebDAVConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wdcu.sqlSave, wdcu.mutation, wdcu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wdcu *WebDAVConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := wdcu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wdcu *WebDAVConfigUpdate) Exec(ctx context.Context) error {
	_, err := wdcu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdcu *WebDAVConfigUpdate) ExecX(ctx context.Context) {
	if err := wdcu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wdcu *WebDAVConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(webdavconfig.Table, webdavconfig.Columns, sqlgraph.NewFieldSpec(webdavconfig.FieldID, field.TypeInt))
	if ps := wdcu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wdcu.mutation.URL(); ok {
		_spec.SetField(webdavconfig.FieldURL, field.TypeString, value)
	}
	if value, ok := wdcu.mutation.Username(); ok {
		_spec.SetField(webdavconfig.FieldUsername, field.TypeString, value)
	}
	if value, ok := wdcu.mutation.Password(); ok {
		_spec.SetField(webdavconfig.FieldPassword, field.TypeString, value)
	}
	if wdcu.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   webdavconfig.StorageTable,
			Columns: []string{webdavconfig.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wdcu.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   webdavconfig.StorageTable,
			Columns: []string{webdavconfig.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, wdcu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webdavconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wdcu.mutation.done = true
	return n, nil
}

// WebDAVConfigUpdateOne is the builder for updating a single WebDAVConfig entity.
type WebDAVConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WebDAVConfigMutation
}

// SetURL sets the "url" field.
func (wdcuo *WebDAVConfigUpdateOne) SetURL(s string) *WebDAVConfigUpdateOne {
	wdcuo.mutation.SetURL(s)
	return wdcuo
}

// SetNillableURL sets the "url" field if the given value is not nil.
func (wdcuo *WebDAVConfigUpdateOne) SetNillableURL(s *string) *WebDAVConfigUpdateOne {
	if s != nil {
		wdcuo.SetURL(*s)
	}
	return wdcuo
}

// SetUsername sets the "username" field.
func (wdcuo *WebDAVConfigUpdateOne) SetUsername(s string) *WebDAVConfigUpdateOne {
	wdcuo.mutation.SetUsername(s)
	return wdcuo
}

// SetNillableUsername sets the "username" field if the given value is not nil.
func (wdcuo *WebDAVConfigUpdateOne) SetNillableUsername(s *string) *WebDAVConfigUpdateOne {
	if s != nil {
		wdcuo.SetUsername(*s)
	}
	return wdcuo
}

// SetPassword sets the "password" field.
func (wdcuo *WebDAVConfigUpdateOne) SetPassword(s string) *WebDAVConfigUpdateOne {
	wdcuo.mutation.SetPassword(s)
	return wdcuo
}

// SetNillablePassword sets the "password" field if the given value is not nil.
func (wdcuo *WebDAVConfigUpdateOne) SetNillablePassword(s *string) *WebDAVConfigUpdateOne {
	if s != nil {
		wdcuo.SetPassword(*s)
	}
	return wdcuo
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (wdcuo *WebDAVConfigUpdateOne) SetStorageID(id int) *WebDAVConfigUpdateOne {
	wdcuo.mutation.SetStorageID(id)
	return wdcuo
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (wdcuo *WebDAVConfigUpdateOne) SetNillableStorageID(id *int) *WebDAVConfigUpdateOne {
	if id != nil {
		wdcuo = wdcuo.SetStorageID(*id)
	}
	return wdcuo
}

// SetStorage sets the "storage" edge to the Storage entity.
func (wdcuo *WebDAVConfigUpdateOne) SetStorage(s *Storage) *WebDAVConfigUpdateOne {
	return wdcuo.SetStorageID(s.ID)
}

// Mutation returns the WebDAVConfigMutation object of the builder.
func (wdcuo *WebDAVConfigUpdateOne) Mutation() *WebDAVConfigMutation {
	return wdcuo.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (wdcuo *WebDAVConfigUpdateOne) ClearStorage() *WebDAVConfigUpdateOne {
	wdcuo.mutation.ClearStorage()
	return wdcuo
}

// Where appends a list predicates to the WebDAVConfigUpdate builder.
func (wdcuo *WebDAVConfigUpdateOne) Where(ps ...predicate.WebDAVConfig) *WebDAVConfigUpdateOne {
	wdcuo.mutation.Where(ps...)
	return wdcuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wdcuo *WebDAVConfigUpdateOne) Select(field string, fields ...string) *WebDAVConfigUpdateOne {
	wdcuo.fields = append([]string{field}, fields...)
	return wdcuo
}

// Save executes the query and returns the updated WebDAVConfig entity.
func (wdcuo *WebDAVConfigUpdateOne) Save(ctx context.Context) (*WebDAVConfig, error) {
	return withHooks(ctx, wdcuo.sqlSave, wdcuo.mutation, wdcuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wdcuo *WebDAVConfigUpdateOne) SaveX(ctx context.Context) *WebDAVConfig {
	node, err := wdcuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wdcuo *WebDAVConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := wdcuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdcuo *WebDAVConfigUpdateOne) ExecX(ctx context.Context) {
	if err := wdcuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (wdcuo *WebDAVConfigUpdateOne) sqlSave(ctx context.Context) (_node *WebDAVConfig, err error) {
	_spec := sqlgraph.NewUpdateSpec(webdavconfig.Table, webdavconfig.Columns, sqlgraph.NewFieldSpec(webdavconfig.FieldID, field.TypeInt))
	id, ok := wdcuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WebDAVConfig.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wdcuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, webdavconfig.FieldID)
		for _, f := range fields {
			if !webdavconfig.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != webdavconfig.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wdcuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wdcuo.mutation.URL(); ok {
		_spec.SetField(webdavconfig.FieldURL, field.TypeString, value)
	}
	if value, ok := wdcuo.mutation.Username(); ok {
		_spec.SetField(webdavconfig.FieldUsername, field.TypeString, value)
	}
	if value, ok := wdcuo.mutation.Password(); ok {
		_spec.SetField(webdavconfig.FieldPassword, field.TypeString, value)
	}
	if wdcuo.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   webdavconfig.StorageTable,
			Columns: []string{webdavconfig.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wdcuo.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   webdavconfig.StorageTable,
			Columns: []string{webdavconfig.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &WebDAVConfig{config: wdcuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wdcuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{webdavconfig.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wdcuo.mutation.done = true
	return _node, nil
}
