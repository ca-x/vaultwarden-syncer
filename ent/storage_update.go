// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ca-x/vaultwarden-syncer/ent/predicate"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/syncjob"
)

// StorageUpdate is the builder for updating Storage entities.
type StorageUpdate struct {
	config
	hooks    []Hook
	mutation *StorageMutation
}

// Where appends a list predicates to the StorageUpdate builder.
func (_u *StorageUpdate) Where(ps ...predicate.Storage) *StorageUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *StorageUpdate) SetName(v string) *StorageUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StorageUpdate) SetNillableName(v *string) *StorageUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *StorageUpdate) SetType(v storage.Type) *StorageUpdate {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *StorageUpdate) SetNillableType(v *storage.Type) *StorageUpdate {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *StorageUpdate) SetConfig(v map[string]interface{}) *StorageUpdate {
	_u.mutation.SetConfig(v)
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *StorageUpdate) SetEnabled(v bool) *StorageUpdate {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *StorageUpdate) SetNillableEnabled(v *bool) *StorageUpdate {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *StorageUpdate) SetCreatedAt(v time.Time) *StorageUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *StorageUpdate) SetNillableCreatedAt(v *time.Time) *StorageUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StorageUpdate) SetUpdatedAt(v time.Time) *StorageUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddSyncJobIDs adds the "sync_jobs" edge to the SyncJob entity by IDs.
func (_u *StorageUpdate) AddSyncJobIDs(ids ...int) *StorageUpdate {
	_u.mutation.AddSyncJobIDs(ids...)
	return _u
}

// AddSyncJobs adds the "sync_jobs" edges to the SyncJob entity.
func (_u *StorageUpdate) AddSyncJobs(v ...*SyncJob) *StorageUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSyncJobIDs(ids...)
}

// Mutation returns the StorageMutation object of the builder.
func (_u *StorageUpdate) Mutation() *StorageMutation {
	return _u.mutation
}

// ClearSyncJobs clears all "sync_jobs" edges to the SyncJob entity.
func (_u *StorageUpdate) ClearSyncJobs() *StorageUpdate {
	_u.mutation.ClearSyncJobs()
	return _u
}

// RemoveSyncJobIDs removes the "sync_jobs" edge to SyncJob entities by IDs.
func (_u *StorageUpdate) RemoveSyncJobIDs(ids ...int) *StorageUpdate {
	_u.mutation.RemoveSyncJobIDs(ids...)
	return _u
}

// RemoveSyncJobs removes "sync_jobs" edges to SyncJob entities.
func (_u *StorageUpdate) RemoveSyncJobs(v ...*SyncJob) *StorageUpdate {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSyncJobIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StorageUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StorageUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StorageUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StorageUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StorageUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := storage.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StorageUpdate) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := storage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Storage.type": %w`, err)}
		}
	}
	return nil
}

func (_u *StorageUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(storage.Table, storage.Columns, sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(storage.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(storage.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(storage.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(storage.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(storage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(storage.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.SyncJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSyncJobsIDs(); len(nodes) > 0 && !_u.mutation.SyncJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SyncJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StorageUpdateOne is the builder for updating a single Storage entity.
type StorageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StorageMutation
}

// SetName sets the "name" field.
func (_u *StorageUpdateOne) SetName(v string) *StorageUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *StorageUpdateOne) SetNillableName(v *string) *StorageUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetType sets the "type" field.
func (_u *StorageUpdateOne) SetType(v storage.Type) *StorageUpdateOne {
	_u.mutation.SetType(v)
	return _u
}

// SetNillableType sets the "type" field if the given value is not nil.
func (_u *StorageUpdateOne) SetNillableType(v *storage.Type) *StorageUpdateOne {
	if v != nil {
		_u.SetType(*v)
	}
	return _u
}

// SetConfig sets the "config" field.
func (_u *StorageUpdateOne) SetConfig(v map[string]interface{}) *StorageUpdateOne {
	_u.mutation.SetConfig(v)
	return _u
}

// SetEnabled sets the "enabled" field.
func (_u *StorageUpdateOne) SetEnabled(v bool) *StorageUpdateOne {
	_u.mutation.SetEnabled(v)
	return _u
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (_u *StorageUpdateOne) SetNillableEnabled(v *bool) *StorageUpdateOne {
	if v != nil {
		_u.SetEnabled(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *StorageUpdateOne) SetCreatedAt(v time.Time) *StorageUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *StorageUpdateOne) SetNillableCreatedAt(v *time.Time) *StorageUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StorageUpdateOne) SetUpdatedAt(v time.Time) *StorageUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddSyncJobIDs adds the "sync_jobs" edge to the SyncJob entity by IDs.
func (_u *StorageUpdateOne) AddSyncJobIDs(ids ...int) *StorageUpdateOne {
	_u.mutation.AddSyncJobIDs(ids...)
	return _u
}

// AddSyncJobs adds the "sync_jobs" edges to the SyncJob entity.
func (_u *StorageUpdateOne) AddSyncJobs(v ...*SyncJob) *StorageUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddSyncJobIDs(ids...)
}

// Mutation returns the StorageMutation object of the builder.
func (_u *StorageUpdateOne) Mutation() *StorageMutation {
	return _u.mutation
}

// ClearSyncJobs clears all "sync_jobs" edges to the SyncJob entity.
func (_u *StorageUpdateOne) ClearSyncJobs() *StorageUpdateOne {
	_u.mutation.ClearSyncJobs()
	return _u
}

// RemoveSyncJobIDs removes the "sync_jobs" edge to SyncJob entities by IDs.
func (_u *StorageUpdateOne) RemoveSyncJobIDs(ids ...int) *StorageUpdateOne {
	_u.mutation.RemoveSyncJobIDs(ids...)
	return _u
}

// RemoveSyncJobs removes "sync_jobs" edges to SyncJob entities.
func (_u *StorageUpdateOne) RemoveSyncJobs(v ...*SyncJob) *StorageUpdateOne {
	ids := make([]int, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveSyncJobIDs(ids...)
}

// Where appends a list predicates to the StorageUpdate builder.
func (_u *StorageUpdateOne) Where(ps ...predicate.Storage) *StorageUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StorageUpdateOne) Select(field string, fields ...string) *StorageUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Storage entity.
func (_u *StorageUpdateOne) Save(ctx context.Context) (*Storage, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StorageUpdateOne) SaveX(ctx context.Context) *Storage {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StorageUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StorageUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StorageUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := storage.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StorageUpdateOne) check() error {
	if v, ok := _u.mutation.GetType(); ok {
		if err := storage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Storage.type": %w`, err)}
		}
	}
	return nil
}

func (_u *StorageUpdateOne) sqlSave(ctx context.Context) (_node *Storage, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(storage.Table, storage.Columns, sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Storage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storage.FieldID)
		for _, f := range fields {
			if !storage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(storage.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.GetType(); ok {
		_spec.SetField(storage.FieldType, field.TypeEnum, value)
	}
	if value, ok := _u.mutation.Config(); ok {
		_spec.SetField(storage.FieldConfig, field.TypeJSON, value)
	}
	if value, ok := _u.mutation.Enabled(); ok {
		_spec.SetField(storage.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(storage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(storage.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.SyncJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedSyncJobsIDs(); len(nodes) > 0 && !_u.mutation.SyncJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.SyncJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Storage{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
