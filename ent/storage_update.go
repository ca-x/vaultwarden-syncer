// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ca-x/vaultwarden-syncer/ent/predicate"
	"github.com/ca-x/vaultwarden-syncer/ent/s3config"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/syncjob"
	"github.com/ca-x/vaultwarden-syncer/ent/webdavconfig"
)

// StorageUpdate is the builder for updating Storage entities.
type StorageUpdate struct {
	config
	hooks    []Hook
	mutation *StorageMutation
}

// Where appends a list predicates to the StorageUpdate builder.
func (su *StorageUpdate) Where(ps ...predicate.Storage) *StorageUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetName sets the "name" field.
func (su *StorageUpdate) SetName(s string) *StorageUpdate {
	su.mutation.SetName(s)
	return su
}

// SetNillableName sets the "name" field if the given value is not nil.
func (su *StorageUpdate) SetNillableName(s *string) *StorageUpdate {
	if s != nil {
		su.SetName(*s)
	}
	return su
}

// SetType sets the "type" field.
func (su *StorageUpdate) SetType(s storage.Type) *StorageUpdate {
	su.mutation.SetType(s)
	return su
}

// SetNillableType sets the "type" field if the given value is not nil.
func (su *StorageUpdate) SetNillableType(s *storage.Type) *StorageUpdate {
	if s != nil {
		su.SetType(*s)
	}
	return su
}

// SetEnabled sets the "enabled" field.
func (su *StorageUpdate) SetEnabled(b bool) *StorageUpdate {
	su.mutation.SetEnabled(b)
	return su
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (su *StorageUpdate) SetNillableEnabled(b *bool) *StorageUpdate {
	if b != nil {
		su.SetEnabled(*b)
	}
	return su
}

// SetCreatedAt sets the "created_at" field.
func (su *StorageUpdate) SetCreatedAt(t time.Time) *StorageUpdate {
	su.mutation.SetCreatedAt(t)
	return su
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (su *StorageUpdate) SetNillableCreatedAt(t *time.Time) *StorageUpdate {
	if t != nil {
		su.SetCreatedAt(*t)
	}
	return su
}

// SetUpdatedAt sets the "updated_at" field.
func (su *StorageUpdate) SetUpdatedAt(t time.Time) *StorageUpdate {
	su.mutation.SetUpdatedAt(t)
	return su
}

// AddSyncJobIDs adds the "sync_jobs" edge to the SyncJob entity by IDs.
func (su *StorageUpdate) AddSyncJobIDs(ids ...int) *StorageUpdate {
	su.mutation.AddSyncJobIDs(ids...)
	return su
}

// AddSyncJobs adds the "sync_jobs" edges to the SyncJob entity.
func (su *StorageUpdate) AddSyncJobs(s ...*SyncJob) *StorageUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.AddSyncJobIDs(ids...)
}

// SetWebdavConfigID sets the "webdav_config" edge to the WebDAVConfig entity by ID.
func (su *StorageUpdate) SetWebdavConfigID(id int) *StorageUpdate {
	su.mutation.SetWebdavConfigID(id)
	return su
}

// SetNillableWebdavConfigID sets the "webdav_config" edge to the WebDAVConfig entity by ID if the given value is not nil.
func (su *StorageUpdate) SetNillableWebdavConfigID(id *int) *StorageUpdate {
	if id != nil {
		su = su.SetWebdavConfigID(*id)
	}
	return su
}

// SetWebdavConfig sets the "webdav_config" edge to the WebDAVConfig entity.
func (su *StorageUpdate) SetWebdavConfig(w *WebDAVConfig) *StorageUpdate {
	return su.SetWebdavConfigID(w.ID)
}

// SetS3ConfigID sets the "s3_config" edge to the S3Config entity by ID.
func (su *StorageUpdate) SetS3ConfigID(id int) *StorageUpdate {
	su.mutation.SetS3ConfigID(id)
	return su
}

// SetNillableS3ConfigID sets the "s3_config" edge to the S3Config entity by ID if the given value is not nil.
func (su *StorageUpdate) SetNillableS3ConfigID(id *int) *StorageUpdate {
	if id != nil {
		su = su.SetS3ConfigID(*id)
	}
	return su
}

// SetS3Config sets the "s3_config" edge to the S3Config entity.
func (su *StorageUpdate) SetS3Config(s *S3Config) *StorageUpdate {
	return su.SetS3ConfigID(s.ID)
}

// Mutation returns the StorageMutation object of the builder.
func (su *StorageUpdate) Mutation() *StorageMutation {
	return su.mutation
}

// ClearSyncJobs clears all "sync_jobs" edges to the SyncJob entity.
func (su *StorageUpdate) ClearSyncJobs() *StorageUpdate {
	su.mutation.ClearSyncJobs()
	return su
}

// RemoveSyncJobIDs removes the "sync_jobs" edge to SyncJob entities by IDs.
func (su *StorageUpdate) RemoveSyncJobIDs(ids ...int) *StorageUpdate {
	su.mutation.RemoveSyncJobIDs(ids...)
	return su
}

// RemoveSyncJobs removes "sync_jobs" edges to SyncJob entities.
func (su *StorageUpdate) RemoveSyncJobs(s ...*SyncJob) *StorageUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return su.RemoveSyncJobIDs(ids...)
}

// ClearWebdavConfig clears the "webdav_config" edge to the WebDAVConfig entity.
func (su *StorageUpdate) ClearWebdavConfig() *StorageUpdate {
	su.mutation.ClearWebdavConfig()
	return su
}

// ClearS3Config clears the "s3_config" edge to the S3Config entity.
func (su *StorageUpdate) ClearS3Config() *StorageUpdate {
	su.mutation.ClearS3Config()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *StorageUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *StorageUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *StorageUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *StorageUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *StorageUpdate) defaults() {
	if _, ok := su.mutation.UpdatedAt(); !ok {
		v := storage.UpdateDefaultUpdatedAt()
		su.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *StorageUpdate) check() error {
	if v, ok := su.mutation.GetType(); ok {
		if err := storage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Storage.type": %w`, err)}
		}
	}
	return nil
}

func (su *StorageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(storage.Table, storage.Columns, sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Name(); ok {
		_spec.SetField(storage.FieldName, field.TypeString, value)
	}
	if value, ok := su.mutation.GetType(); ok {
		_spec.SetField(storage.FieldType, field.TypeEnum, value)
	}
	if value, ok := su.mutation.Enabled(); ok {
		_spec.SetField(storage.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := su.mutation.CreatedAt(); ok {
		_spec.SetField(storage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := su.mutation.UpdatedAt(); ok {
		_spec.SetField(storage.FieldUpdatedAt, field.TypeTime, value)
	}
	if su.mutation.SyncJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedSyncJobsIDs(); len(nodes) > 0 && !su.mutation.SyncJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.SyncJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.WebdavConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.WebdavConfigTable,
			Columns: []string{storage.WebdavConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webdavconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.WebdavConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.WebdavConfigTable,
			Columns: []string{storage.WebdavConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webdavconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.S3ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.S3ConfigTable,
			Columns: []string{storage.S3ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3config.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.S3ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.S3ConfigTable,
			Columns: []string{storage.S3ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3config.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// StorageUpdateOne is the builder for updating a single Storage entity.
type StorageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StorageMutation
}

// SetName sets the "name" field.
func (suo *StorageUpdateOne) SetName(s string) *StorageUpdateOne {
	suo.mutation.SetName(s)
	return suo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableName(s *string) *StorageUpdateOne {
	if s != nil {
		suo.SetName(*s)
	}
	return suo
}

// SetType sets the "type" field.
func (suo *StorageUpdateOne) SetType(s storage.Type) *StorageUpdateOne {
	suo.mutation.SetType(s)
	return suo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableType(s *storage.Type) *StorageUpdateOne {
	if s != nil {
		suo.SetType(*s)
	}
	return suo
}

// SetEnabled sets the "enabled" field.
func (suo *StorageUpdateOne) SetEnabled(b bool) *StorageUpdateOne {
	suo.mutation.SetEnabled(b)
	return suo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableEnabled(b *bool) *StorageUpdateOne {
	if b != nil {
		suo.SetEnabled(*b)
	}
	return suo
}

// SetCreatedAt sets the "created_at" field.
func (suo *StorageUpdateOne) SetCreatedAt(t time.Time) *StorageUpdateOne {
	suo.mutation.SetCreatedAt(t)
	return suo
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableCreatedAt(t *time.Time) *StorageUpdateOne {
	if t != nil {
		suo.SetCreatedAt(*t)
	}
	return suo
}

// SetUpdatedAt sets the "updated_at" field.
func (suo *StorageUpdateOne) SetUpdatedAt(t time.Time) *StorageUpdateOne {
	suo.mutation.SetUpdatedAt(t)
	return suo
}

// AddSyncJobIDs adds the "sync_jobs" edge to the SyncJob entity by IDs.
func (suo *StorageUpdateOne) AddSyncJobIDs(ids ...int) *StorageUpdateOne {
	suo.mutation.AddSyncJobIDs(ids...)
	return suo
}

// AddSyncJobs adds the "sync_jobs" edges to the SyncJob entity.
func (suo *StorageUpdateOne) AddSyncJobs(s ...*SyncJob) *StorageUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.AddSyncJobIDs(ids...)
}

// SetWebdavConfigID sets the "webdav_config" edge to the WebDAVConfig entity by ID.
func (suo *StorageUpdateOne) SetWebdavConfigID(id int) *StorageUpdateOne {
	suo.mutation.SetWebdavConfigID(id)
	return suo
}

// SetNillableWebdavConfigID sets the "webdav_config" edge to the WebDAVConfig entity by ID if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableWebdavConfigID(id *int) *StorageUpdateOne {
	if id != nil {
		suo = suo.SetWebdavConfigID(*id)
	}
	return suo
}

// SetWebdavConfig sets the "webdav_config" edge to the WebDAVConfig entity.
func (suo *StorageUpdateOne) SetWebdavConfig(w *WebDAVConfig) *StorageUpdateOne {
	return suo.SetWebdavConfigID(w.ID)
}

// SetS3ConfigID sets the "s3_config" edge to the S3Config entity by ID.
func (suo *StorageUpdateOne) SetS3ConfigID(id int) *StorageUpdateOne {
	suo.mutation.SetS3ConfigID(id)
	return suo
}

// SetNillableS3ConfigID sets the "s3_config" edge to the S3Config entity by ID if the given value is not nil.
func (suo *StorageUpdateOne) SetNillableS3ConfigID(id *int) *StorageUpdateOne {
	if id != nil {
		suo = suo.SetS3ConfigID(*id)
	}
	return suo
}

// SetS3Config sets the "s3_config" edge to the S3Config entity.
func (suo *StorageUpdateOne) SetS3Config(s *S3Config) *StorageUpdateOne {
	return suo.SetS3ConfigID(s.ID)
}

// Mutation returns the StorageMutation object of the builder.
func (suo *StorageUpdateOne) Mutation() *StorageMutation {
	return suo.mutation
}

// ClearSyncJobs clears all "sync_jobs" edges to the SyncJob entity.
func (suo *StorageUpdateOne) ClearSyncJobs() *StorageUpdateOne {
	suo.mutation.ClearSyncJobs()
	return suo
}

// RemoveSyncJobIDs removes the "sync_jobs" edge to SyncJob entities by IDs.
func (suo *StorageUpdateOne) RemoveSyncJobIDs(ids ...int) *StorageUpdateOne {
	suo.mutation.RemoveSyncJobIDs(ids...)
	return suo
}

// RemoveSyncJobs removes "sync_jobs" edges to SyncJob entities.
func (suo *StorageUpdateOne) RemoveSyncJobs(s ...*SyncJob) *StorageUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return suo.RemoveSyncJobIDs(ids...)
}

// ClearWebdavConfig clears the "webdav_config" edge to the WebDAVConfig entity.
func (suo *StorageUpdateOne) ClearWebdavConfig() *StorageUpdateOne {
	suo.mutation.ClearWebdavConfig()
	return suo
}

// ClearS3Config clears the "s3_config" edge to the S3Config entity.
func (suo *StorageUpdateOne) ClearS3Config() *StorageUpdateOne {
	suo.mutation.ClearS3Config()
	return suo
}

// Where appends a list predicates to the StorageUpdate builder.
func (suo *StorageUpdateOne) Where(ps ...predicate.Storage) *StorageUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *StorageUpdateOne) Select(field string, fields ...string) *StorageUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Storage entity.
func (suo *StorageUpdateOne) Save(ctx context.Context) (*Storage, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *StorageUpdateOne) SaveX(ctx context.Context) *Storage {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *StorageUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *StorageUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *StorageUpdateOne) defaults() {
	if _, ok := suo.mutation.UpdatedAt(); !ok {
		v := storage.UpdateDefaultUpdatedAt()
		suo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *StorageUpdateOne) check() error {
	if v, ok := suo.mutation.GetType(); ok {
		if err := storage.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Storage.type": %w`, err)}
		}
	}
	return nil
}

func (suo *StorageUpdateOne) sqlSave(ctx context.Context) (_node *Storage, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(storage.Table, storage.Columns, sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Storage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, storage.FieldID)
		for _, f := range fields {
			if !storage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != storage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Name(); ok {
		_spec.SetField(storage.FieldName, field.TypeString, value)
	}
	if value, ok := suo.mutation.GetType(); ok {
		_spec.SetField(storage.FieldType, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.Enabled(); ok {
		_spec.SetField(storage.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := suo.mutation.CreatedAt(); ok {
		_spec.SetField(storage.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := suo.mutation.UpdatedAt(); ok {
		_spec.SetField(storage.FieldUpdatedAt, field.TypeTime, value)
	}
	if suo.mutation.SyncJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedSyncJobsIDs(); len(nodes) > 0 && !suo.mutation.SyncJobsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.SyncJobsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   storage.SyncJobsTable,
			Columns: []string{storage.SyncJobsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(syncjob.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.WebdavConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.WebdavConfigTable,
			Columns: []string{storage.WebdavConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webdavconfig.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.WebdavConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.WebdavConfigTable,
			Columns: []string{storage.WebdavConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(webdavconfig.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.S3ConfigCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.S3ConfigTable,
			Columns: []string{storage.S3ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3config.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.S3ConfigIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   storage.S3ConfigTable,
			Columns: []string{storage.S3ConfigColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(s3config.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Storage{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{storage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
