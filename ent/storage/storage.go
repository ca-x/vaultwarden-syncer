// Code generated by ent, DO NOT EDIT.

package storage

import (
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the storage type in the database.
	Label = "storage"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldEnabled holds the string denoting the enabled field in the database.
	FieldEnabled = "enabled"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeSyncJobs holds the string denoting the sync_jobs edge name in mutations.
	EdgeSyncJobs = "sync_jobs"
	// EdgeWebdavConfig holds the string denoting the webdav_config edge name in mutations.
	EdgeWebdavConfig = "webdav_config"
	// EdgeS3Config holds the string denoting the s3_config edge name in mutations.
	EdgeS3Config = "s3_config"
	// Table holds the table name of the storage in the database.
	Table = "storages"
	// SyncJobsTable is the table that holds the sync_jobs relation/edge.
	SyncJobsTable = "sync_jobs"
	// SyncJobsInverseTable is the table name for the SyncJob entity.
	// It exists in this package in order to avoid circular dependency with the "syncjob" package.
	SyncJobsInverseTable = "sync_jobs"
	// SyncJobsColumn is the table column denoting the sync_jobs relation/edge.
	SyncJobsColumn = "storage_sync_jobs"
	// WebdavConfigTable is the table that holds the webdav_config relation/edge.
	WebdavConfigTable = "web_dav_configs"
	// WebdavConfigInverseTable is the table name for the WebDAVConfig entity.
	// It exists in this package in order to avoid circular dependency with the "webdavconfig" package.
	WebdavConfigInverseTable = "web_dav_configs"
	// WebdavConfigColumn is the table column denoting the webdav_config relation/edge.
	WebdavConfigColumn = "storage_webdav_config"
	// S3ConfigTable is the table that holds the s3_config relation/edge.
	S3ConfigTable = "s3configs"
	// S3ConfigInverseTable is the table name for the S3Config entity.
	// It exists in this package in order to avoid circular dependency with the "s3config" package.
	S3ConfigInverseTable = "s3configs"
	// S3ConfigColumn is the table column denoting the s3_config relation/edge.
	S3ConfigColumn = "storage_s3_config"
)

// Columns holds all SQL columns for storage fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldEnabled,
	FieldCreatedAt,
	FieldUpdatedAt,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultEnabled holds the default value on creation for the "enabled" field.
	DefaultEnabled bool
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// DefaultUpdatedAt holds the default value on creation for the "updated_at" field.
	DefaultUpdatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeWebdav Type = "webdav"
	TypeS3     Type = "s3"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeWebdav, TypeS3:
		return nil
	default:
		return fmt.Errorf("storage: invalid enum value for type field: %q", _type)
	}
}

// OrderOption defines the ordering options for the Storage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByEnabled orders the results by the enabled field.
func ByEnabled(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEnabled, opts...).ToFunc()
}

// ByCreatedAt orders the results by the created_at field.
func ByCreatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreatedAt, opts...).ToFunc()
}

// ByUpdatedAt orders the results by the updated_at field.
func ByUpdatedAt(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUpdatedAt, opts...).ToFunc()
}

// BySyncJobsCount orders the results by sync_jobs count.
func BySyncJobsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSyncJobsStep(), opts...)
	}
}

// BySyncJobs orders the results by sync_jobs terms.
func BySyncJobs(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSyncJobsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByWebdavConfigField orders the results by webdav_config field.
func ByWebdavConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newWebdavConfigStep(), sql.OrderByField(field, opts...))
	}
}

// ByS3ConfigField orders the results by s3_config field.
func ByS3ConfigField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newS3ConfigStep(), sql.OrderByField(field, opts...))
	}
}
func newSyncJobsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SyncJobsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SyncJobsTable, SyncJobsColumn),
	)
}
func newWebdavConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(WebdavConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, WebdavConfigTable, WebdavConfigColumn),
	)
}
func newS3ConfigStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(S3ConfigInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, S3ConfigTable, S3ConfigColumn),
	)
}
