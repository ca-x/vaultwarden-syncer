// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ca-x/vaultwarden-syncer/ent/predicate"
	"github.com/ca-x/vaultwarden-syncer/ent/s3config"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
)

// S3ConfigUpdate is the builder for updating S3Config entities.
type S3ConfigUpdate struct {
	config
	hooks    []Hook
	mutation *S3ConfigMutation
}

// Where appends a list predicates to the S3ConfigUpdate builder.
func (su *S3ConfigUpdate) Where(ps ...predicate.S3Config) *S3ConfigUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetEndpoint sets the "endpoint" field.
func (su *S3ConfigUpdate) SetEndpoint(s string) *S3ConfigUpdate {
	su.mutation.SetEndpoint(s)
	return su
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (su *S3ConfigUpdate) SetNillableEndpoint(s *string) *S3ConfigUpdate {
	if s != nil {
		su.SetEndpoint(*s)
	}
	return su
}

// ClearEndpoint clears the value of the "endpoint" field.
func (su *S3ConfigUpdate) ClearEndpoint() *S3ConfigUpdate {
	su.mutation.ClearEndpoint()
	return su
}

// SetAccessKeyID sets the "access_key_id" field.
func (su *S3ConfigUpdate) SetAccessKeyID(s string) *S3ConfigUpdate {
	su.mutation.SetAccessKeyID(s)
	return su
}

// SetNillableAccessKeyID sets the "access_key_id" field if the given value is not nil.
func (su *S3ConfigUpdate) SetNillableAccessKeyID(s *string) *S3ConfigUpdate {
	if s != nil {
		su.SetAccessKeyID(*s)
	}
	return su
}

// SetSecretAccessKey sets the "secret_access_key" field.
func (su *S3ConfigUpdate) SetSecretAccessKey(s string) *S3ConfigUpdate {
	su.mutation.SetSecretAccessKey(s)
	return su
}

// SetNillableSecretAccessKey sets the "secret_access_key" field if the given value is not nil.
func (su *S3ConfigUpdate) SetNillableSecretAccessKey(s *string) *S3ConfigUpdate {
	if s != nil {
		su.SetSecretAccessKey(*s)
	}
	return su
}

// SetRegion sets the "region" field.
func (su *S3ConfigUpdate) SetRegion(s string) *S3ConfigUpdate {
	su.mutation.SetRegion(s)
	return su
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (su *S3ConfigUpdate) SetNillableRegion(s *string) *S3ConfigUpdate {
	if s != nil {
		su.SetRegion(*s)
	}
	return su
}

// SetBucket sets the "bucket" field.
func (su *S3ConfigUpdate) SetBucket(s string) *S3ConfigUpdate {
	su.mutation.SetBucket(s)
	return su
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (su *S3ConfigUpdate) SetNillableBucket(s *string) *S3ConfigUpdate {
	if s != nil {
		su.SetBucket(*s)
	}
	return su
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (su *S3ConfigUpdate) SetStorageID(id int) *S3ConfigUpdate {
	su.mutation.SetStorageID(id)
	return su
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (su *S3ConfigUpdate) SetNillableStorageID(id *int) *S3ConfigUpdate {
	if id != nil {
		su = su.SetStorageID(*id)
	}
	return su
}

// SetStorage sets the "storage" edge to the Storage entity.
func (su *S3ConfigUpdate) SetStorage(s *Storage) *S3ConfigUpdate {
	return su.SetStorageID(s.ID)
}

// Mutation returns the S3ConfigMutation object of the builder.
func (su *S3ConfigUpdate) Mutation() *S3ConfigMutation {
	return su.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (su *S3ConfigUpdate) ClearStorage() *S3ConfigUpdate {
	su.mutation.ClearStorage()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *S3ConfigUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *S3ConfigUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *S3ConfigUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *S3ConfigUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

func (su *S3ConfigUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(s3config.Table, s3config.Columns, sqlgraph.NewFieldSpec(s3config.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Endpoint(); ok {
		_spec.SetField(s3config.FieldEndpoint, field.TypeString, value)
	}
	if su.mutation.EndpointCleared() {
		_spec.ClearField(s3config.FieldEndpoint, field.TypeString)
	}
	if value, ok := su.mutation.AccessKeyID(); ok {
		_spec.SetField(s3config.FieldAccessKeyID, field.TypeString, value)
	}
	if value, ok := su.mutation.SecretAccessKey(); ok {
		_spec.SetField(s3config.FieldSecretAccessKey, field.TypeString, value)
	}
	if value, ok := su.mutation.Region(); ok {
		_spec.SetField(s3config.FieldRegion, field.TypeString, value)
	}
	if value, ok := su.mutation.Bucket(); ok {
		_spec.SetField(s3config.FieldBucket, field.TypeString, value)
	}
	if su.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   s3config.StorageTable,
			Columns: []string{s3config.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   s3config.StorageTable,
			Columns: []string{s3config.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3config.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// S3ConfigUpdateOne is the builder for updating a single S3Config entity.
type S3ConfigUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *S3ConfigMutation
}

// SetEndpoint sets the "endpoint" field.
func (suo *S3ConfigUpdateOne) SetEndpoint(s string) *S3ConfigUpdateOne {
	suo.mutation.SetEndpoint(s)
	return suo
}

// SetNillableEndpoint sets the "endpoint" field if the given value is not nil.
func (suo *S3ConfigUpdateOne) SetNillableEndpoint(s *string) *S3ConfigUpdateOne {
	if s != nil {
		suo.SetEndpoint(*s)
	}
	return suo
}

// ClearEndpoint clears the value of the "endpoint" field.
func (suo *S3ConfigUpdateOne) ClearEndpoint() *S3ConfigUpdateOne {
	suo.mutation.ClearEndpoint()
	return suo
}

// SetAccessKeyID sets the "access_key_id" field.
func (suo *S3ConfigUpdateOne) SetAccessKeyID(s string) *S3ConfigUpdateOne {
	suo.mutation.SetAccessKeyID(s)
	return suo
}

// SetNillableAccessKeyID sets the "access_key_id" field if the given value is not nil.
func (suo *S3ConfigUpdateOne) SetNillableAccessKeyID(s *string) *S3ConfigUpdateOne {
	if s != nil {
		suo.SetAccessKeyID(*s)
	}
	return suo
}

// SetSecretAccessKey sets the "secret_access_key" field.
func (suo *S3ConfigUpdateOne) SetSecretAccessKey(s string) *S3ConfigUpdateOne {
	suo.mutation.SetSecretAccessKey(s)
	return suo
}

// SetNillableSecretAccessKey sets the "secret_access_key" field if the given value is not nil.
func (suo *S3ConfigUpdateOne) SetNillableSecretAccessKey(s *string) *S3ConfigUpdateOne {
	if s != nil {
		suo.SetSecretAccessKey(*s)
	}
	return suo
}

// SetRegion sets the "region" field.
func (suo *S3ConfigUpdateOne) SetRegion(s string) *S3ConfigUpdateOne {
	suo.mutation.SetRegion(s)
	return suo
}

// SetNillableRegion sets the "region" field if the given value is not nil.
func (suo *S3ConfigUpdateOne) SetNillableRegion(s *string) *S3ConfigUpdateOne {
	if s != nil {
		suo.SetRegion(*s)
	}
	return suo
}

// SetBucket sets the "bucket" field.
func (suo *S3ConfigUpdateOne) SetBucket(s string) *S3ConfigUpdateOne {
	suo.mutation.SetBucket(s)
	return suo
}

// SetNillableBucket sets the "bucket" field if the given value is not nil.
func (suo *S3ConfigUpdateOne) SetNillableBucket(s *string) *S3ConfigUpdateOne {
	if s != nil {
		suo.SetBucket(*s)
	}
	return suo
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (suo *S3ConfigUpdateOne) SetStorageID(id int) *S3ConfigUpdateOne {
	suo.mutation.SetStorageID(id)
	return suo
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (suo *S3ConfigUpdateOne) SetNillableStorageID(id *int) *S3ConfigUpdateOne {
	if id != nil {
		suo = suo.SetStorageID(*id)
	}
	return suo
}

// SetStorage sets the "storage" edge to the Storage entity.
func (suo *S3ConfigUpdateOne) SetStorage(s *Storage) *S3ConfigUpdateOne {
	return suo.SetStorageID(s.ID)
}

// Mutation returns the S3ConfigMutation object of the builder.
func (suo *S3ConfigUpdateOne) Mutation() *S3ConfigMutation {
	return suo.mutation
}

// ClearStorage clears the "storage" edge to the Storage entity.
func (suo *S3ConfigUpdateOne) ClearStorage() *S3ConfigUpdateOne {
	suo.mutation.ClearStorage()
	return suo
}

// Where appends a list predicates to the S3ConfigUpdate builder.
func (suo *S3ConfigUpdateOne) Where(ps ...predicate.S3Config) *S3ConfigUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *S3ConfigUpdateOne) Select(field string, fields ...string) *S3ConfigUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated S3Config entity.
func (suo *S3ConfigUpdateOne) Save(ctx context.Context) (*S3Config, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *S3ConfigUpdateOne) SaveX(ctx context.Context) *S3Config {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *S3ConfigUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *S3ConfigUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (suo *S3ConfigUpdateOne) sqlSave(ctx context.Context) (_node *S3Config, err error) {
	_spec := sqlgraph.NewUpdateSpec(s3config.Table, s3config.Columns, sqlgraph.NewFieldSpec(s3config.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "S3Config.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, s3config.FieldID)
		for _, f := range fields {
			if !s3config.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != s3config.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Endpoint(); ok {
		_spec.SetField(s3config.FieldEndpoint, field.TypeString, value)
	}
	if suo.mutation.EndpointCleared() {
		_spec.ClearField(s3config.FieldEndpoint, field.TypeString)
	}
	if value, ok := suo.mutation.AccessKeyID(); ok {
		_spec.SetField(s3config.FieldAccessKeyID, field.TypeString, value)
	}
	if value, ok := suo.mutation.SecretAccessKey(); ok {
		_spec.SetField(s3config.FieldSecretAccessKey, field.TypeString, value)
	}
	if value, ok := suo.mutation.Region(); ok {
		_spec.SetField(s3config.FieldRegion, field.TypeString, value)
	}
	if value, ok := suo.mutation.Bucket(); ok {
		_spec.SetField(s3config.FieldBucket, field.TypeString, value)
	}
	if suo.mutation.StorageCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   s3config.StorageTable,
			Columns: []string{s3config.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   s3config.StorageTable,
			Columns: []string{s3config.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &S3Config{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{s3config.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
