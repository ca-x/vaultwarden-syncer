// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ca-x/vaultwarden-syncer/ent/predicate"
	"github.com/ca-x/vaultwarden-syncer/ent/webdavconfig"
)

// WebDAVConfigDelete is the builder for deleting a WebDAVConfig entity.
type WebDAVConfigDelete struct {
	config
	hooks    []Hook
	mutation *WebDAVConfigMutation
}

// Where appends a list predicates to the WebDAVConfigDelete builder.
func (wdcd *WebDAVConfigDelete) Where(ps ...predicate.WebDAVConfig) *WebDAVConfigDelete {
	wdcd.mutation.Where(ps...)
	return wdcd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (wdcd *WebDAVConfigDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, wdcd.sqlExec, wdcd.mutation, wdcd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (wdcd *WebDAVConfigDelete) ExecX(ctx context.Context) int {
	n, err := wdcd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (wdcd *WebDAVConfigDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(webdavconfig.Table, sqlgraph.NewFieldSpec(webdavconfig.FieldID, field.TypeInt))
	if ps := wdcd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, wdcd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	wdcd.mutation.done = true
	return affected, err
}

// WebDAVConfigDeleteOne is the builder for deleting a single WebDAVConfig entity.
type WebDAVConfigDeleteOne struct {
	wdcd *WebDAVConfigDelete
}

// Where appends a list predicates to the WebDAVConfigDelete builder.
func (wdcdo *WebDAVConfigDeleteOne) Where(ps ...predicate.WebDAVConfig) *WebDAVConfigDeleteOne {
	wdcdo.wdcd.mutation.Where(ps...)
	return wdcdo
}

// Exec executes the deletion query.
func (wdcdo *WebDAVConfigDeleteOne) Exec(ctx context.Context) error {
	n, err := wdcdo.wdcd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{webdavconfig.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (wdcdo *WebDAVConfigDeleteOne) ExecX(ctx context.Context) {
	if err := wdcdo.Exec(ctx); err != nil {
		panic(err)
	}
}
