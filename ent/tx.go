// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"sync"

	"entgo.io/ent/dialect"
)

// Tx is a transactional client that is created by calling Client.Tx().
type Tx struct {
	config
	// Storage is the client for interacting with the Storage builders.
	Storage *StorageClient
	// SyncJob is the client for interacting with the SyncJob builders.
	SyncJob *SyncJobClient
	// User is the client for interacting with the User builders.
	User *UserClient

	// lazily loaded.
	client     *Client
	clientOnce sync.Once
	// ctx lives for the life of the transaction. It is
	// the same context used by the underlying connection.
	ctx context.Context
}

type (
	// Committer is the interface that wraps the Commit method.
	Committer interface {
		Commit(context.Context) error
	}

	// Rollbacker is the interface that wraps the Rollback method.
	Rollbacker interface {
		Rollback(context.Context) error
	}
)

// Commit commits the transaction.
func (tx *Tx) Commit() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Committer
	if f, ok := txDriver.tx.(interface{ Commit() error }); ok {
		fn = f
	} else if f, ok := txDriver.tx.(Committer); ok {
		fn = f
	} else {
		return nil
	}
	return fn.Commit(tx.ctx)
}

// Rollback rollbacks the transaction.
func (tx *Tx) Rollback() error {
	txDriver := tx.config.driver.(*txDriver)
	var fn Rollbacker
	if f, ok := txDriver.tx.(interface{ Rollback() error }); ok {
		fn = f
	} else if f, ok := txDriver.tx.(Rollbacker); ok {
		fn = f
	} else {
		return nil
	}
	return fn.Rollback(tx.ctx)
}

// Client returns a Client that binds to current transaction.
func (tx *Tx) Client() *Client {
	tx.clientOnce.Do(func() {
		tx.client = &Client{config: tx.config}
		tx.client.init()
	})
	return tx.client
}

func (tx *Tx) init() {
	tx.Storage = NewStorageClient(tx.config)
	tx.SyncJob = NewSyncJobClient(tx.config)
	tx.User = NewUserClient(tx.config)
}