// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ca-x/vaultwarden-syncer/ent/storage"
	"github.com/ca-x/vaultwarden-syncer/ent/webdavconfig"
)

// WebDAVConfigCreate is the builder for creating a WebDAVConfig entity.
type WebDAVConfigCreate struct {
	config
	mutation *WebDAVConfigMutation
	hooks    []Hook
}

// SetURL sets the "url" field.
func (wdcc *WebDAVConfigCreate) SetURL(s string) *WebDAVConfigCreate {
	wdcc.mutation.SetURL(s)
	return wdcc
}

// SetUsername sets the "username" field.
func (wdcc *WebDAVConfigCreate) SetUsername(s string) *WebDAVConfigCreate {
	wdcc.mutation.SetUsername(s)
	return wdcc
}

// SetPassword sets the "password" field.
func (wdcc *WebDAVConfigCreate) SetPassword(s string) *WebDAVConfigCreate {
	wdcc.mutation.SetPassword(s)
	return wdcc
}

// SetStorageID sets the "storage" edge to the Storage entity by ID.
func (wdcc *WebDAVConfigCreate) SetStorageID(id int) *WebDAVConfigCreate {
	wdcc.mutation.SetStorageID(id)
	return wdcc
}

// SetNillableStorageID sets the "storage" edge to the Storage entity by ID if the given value is not nil.
func (wdcc *WebDAVConfigCreate) SetNillableStorageID(id *int) *WebDAVConfigCreate {
	if id != nil {
		wdcc = wdcc.SetStorageID(*id)
	}
	return wdcc
}

// SetStorage sets the "storage" edge to the Storage entity.
func (wdcc *WebDAVConfigCreate) SetStorage(s *Storage) *WebDAVConfigCreate {
	return wdcc.SetStorageID(s.ID)
}

// Mutation returns the WebDAVConfigMutation object of the builder.
func (wdcc *WebDAVConfigCreate) Mutation() *WebDAVConfigMutation {
	return wdcc.mutation
}

// Save creates the WebDAVConfig in the database.
func (wdcc *WebDAVConfigCreate) Save(ctx context.Context) (*WebDAVConfig, error) {
	return withHooks(ctx, wdcc.sqlSave, wdcc.mutation, wdcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (wdcc *WebDAVConfigCreate) SaveX(ctx context.Context) *WebDAVConfig {
	v, err := wdcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wdcc *WebDAVConfigCreate) Exec(ctx context.Context) error {
	_, err := wdcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdcc *WebDAVConfigCreate) ExecX(ctx context.Context) {
	if err := wdcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wdcc *WebDAVConfigCreate) check() error {
	if _, ok := wdcc.mutation.URL(); !ok {
		return &ValidationError{Name: "url", err: errors.New(`ent: missing required field "WebDAVConfig.url"`)}
	}
	if _, ok := wdcc.mutation.Username(); !ok {
		return &ValidationError{Name: "username", err: errors.New(`ent: missing required field "WebDAVConfig.username"`)}
	}
	if _, ok := wdcc.mutation.Password(); !ok {
		return &ValidationError{Name: "password", err: errors.New(`ent: missing required field "WebDAVConfig.password"`)}
	}
	return nil
}

func (wdcc *WebDAVConfigCreate) sqlSave(ctx context.Context) (*WebDAVConfig, error) {
	if err := wdcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := wdcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, wdcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	wdcc.mutation.id = &_node.ID
	wdcc.mutation.done = true
	return _node, nil
}

func (wdcc *WebDAVConfigCreate) createSpec() (*WebDAVConfig, *sqlgraph.CreateSpec) {
	var (
		_node = &WebDAVConfig{config: wdcc.config}
		_spec = sqlgraph.NewCreateSpec(webdavconfig.Table, sqlgraph.NewFieldSpec(webdavconfig.FieldID, field.TypeInt))
	)
	if value, ok := wdcc.mutation.URL(); ok {
		_spec.SetField(webdavconfig.FieldURL, field.TypeString, value)
		_node.URL = value
	}
	if value, ok := wdcc.mutation.Username(); ok {
		_spec.SetField(webdavconfig.FieldUsername, field.TypeString, value)
		_node.Username = value
	}
	if value, ok := wdcc.mutation.Password(); ok {
		_spec.SetField(webdavconfig.FieldPassword, field.TypeString, value)
		_node.Password = value
	}
	if nodes := wdcc.mutation.StorageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   webdavconfig.StorageTable,
			Columns: []string{webdavconfig.StorageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(storage.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.storage_webdav_config = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// WebDAVConfigCreateBulk is the builder for creating many WebDAVConfig entities in bulk.
type WebDAVConfigCreateBulk struct {
	config
	err      error
	builders []*WebDAVConfigCreate
}

// Save creates the WebDAVConfig entities in the database.
func (wdccb *WebDAVConfigCreateBulk) Save(ctx context.Context) ([]*WebDAVConfig, error) {
	if wdccb.err != nil {
		return nil, wdccb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(wdccb.builders))
	nodes := make([]*WebDAVConfig, len(wdccb.builders))
	mutators := make([]Mutator, len(wdccb.builders))
	for i := range wdccb.builders {
		func(i int, root context.Context) {
			builder := wdccb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*WebDAVConfigMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, wdccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, wdccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, wdccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (wdccb *WebDAVConfigCreateBulk) SaveX(ctx context.Context) []*WebDAVConfig {
	v, err := wdccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (wdccb *WebDAVConfigCreateBulk) Exec(ctx context.Context) error {
	_, err := wdccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wdccb *WebDAVConfigCreateBulk) ExecX(ctx context.Context) {
	if err := wdccb.Exec(ctx); err != nil {
		panic(err)
	}
}
